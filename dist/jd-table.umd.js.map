{"version":3,"file":"jd-table.umd.js","sources":["../node_modules/vue-runtime-helpers/dist/normalize-component.js","../src/jd-table.vue","../src/wrapper.js"],"sourcesContent":["'use strict';\n\nfunction normalizeComponent(template, style, script, scopeId, isFunctionalTemplate, moduleIdentifier\n/* server only */\n, shadowMode, createInjector, createInjectorSSR, createInjectorShadow) {\n  if (typeof shadowMode !== 'boolean') {\n    createInjectorSSR = createInjector;\n    createInjector = shadowMode;\n    shadowMode = false;\n  } // Vue.extend constructor export interop.\n\n\n  var options = typeof script === 'function' ? script.options : script; // render functions\n\n  if (template && template.render) {\n    options.render = template.render;\n    options.staticRenderFns = template.staticRenderFns;\n    options._compiled = true; // functional template\n\n    if (isFunctionalTemplate) {\n      options.functional = true;\n    }\n  } // scopedId\n\n\n  if (scopeId) {\n    options._scopeId = scopeId;\n  }\n\n  var hook;\n\n  if (moduleIdentifier) {\n    // server build\n    hook = function hook(context) {\n      // 2.3 injection\n      context = context || // cached call\n      this.$vnode && this.$vnode.ssrContext || // stateful\n      this.parent && this.parent.$vnode && this.parent.$vnode.ssrContext; // functional\n      // 2.2 with runInNewContext: true\n\n      if (!context && typeof __VUE_SSR_CONTEXT__ !== 'undefined') {\n        context = __VUE_SSR_CONTEXT__;\n      } // inject component styles\n\n\n      if (style) {\n        style.call(this, createInjectorSSR(context));\n      } // register component module identifier for async chunk inference\n\n\n      if (context && context._registeredComponents) {\n        context._registeredComponents.add(moduleIdentifier);\n      }\n    }; // used by ssr in case component is cached and beforeCreate\n    // never gets called\n\n\n    options._ssrRegister = hook;\n  } else if (style) {\n    hook = shadowMode ? function () {\n      style.call(this, createInjectorShadow(this.$root.$options.shadowRoot));\n    } : function (context) {\n      style.call(this, createInjector(context));\n    };\n  }\n\n  if (hook) {\n    if (options.functional) {\n      // register for functional component in vue file\n      var originalRender = options.render;\n\n      options.render = function renderWithStyleInjection(h, context) {\n        hook.call(context);\n        return originalRender(h, context);\n      };\n    } else {\n      // inject component registration as beforeCreate hook\n      var existing = options.beforeCreate;\n      options.beforeCreate = existing ? [].concat(existing, hook) : [hook];\n    }\n  }\n\n  return script;\n}\n\nmodule.exports = normalizeComponent;\n//# sourceMappingURL=normalize-component.js.map\n","<template>\n\t<div class=\"JD-Reset JD-Table\" :class=\"frameClasses\" :style=\"frameStyles\">\n\t\t<div v-if=\"setting.title !== null\" class=\"layerTitle\">{{ setting.title }}</div>\n\n\t\t<!-- Layer: Highlight -->\n\t\t<div v-if=\"setting.highlight\" class=\"layerHighlight JD-NoneSelectable\" :style=\"layerHighlightStyles\"></div>\n\n\t\t<!-- Layer: Controls -->\n\t\t<div v-if=\"setting.controls\" class=\"layerControl JD-NoneSelectable\" :style=\"layerControlStyles\">\n\n\t\t\t<!-- Control: Search -->\n\t\t\t<div v-if=\"setting.search\" class=\"controlSearch\" :class=\"controlSearchClasses\">\n\n\t\t\t\t<span @click=\"featureAction('Search')\" class=\"controlItem\" :class=\"searchIconClasses\" :title=\"searchIconTitle\">\n\t\t\t\t\t<i  class=\"fas fa-search\"></i>\n\n\t\t\t\t\t<!-- Control: Get Started with Search Reminder -->\n\t\t\t\t\t<div v-if=\"setting.startBySearchArrowSearch\" class=\"searchArrow\">\n\t\t\t\t\t{{ setting.startBySearchArrowSearchText }}\n\t\t\t\t</div>\n\t\t\t\t</span>\n\n\t\t\t\t<input v-show=\"feature.searching\" @keyup.enter=\"performSearch\" v-model=\"search.text\" type=\"search\" ref=\"searchField\" :placeholder=\"setting.searchPlaceHolder ? setting.searchPlaceHolder : 'Search Here ..'\">\n\n\t\t\t\t<span v-show=\"!search.searching\" @click=\"performSearch\" class=\"controlItem search\" title=\"Perform Search\">\n\t\t\t\t\t<i  class=\"fas fa-angle-right\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<span v-show=\"search.searching\" @click=\"clearSearch\" class=\"controlItem clearSearch\" title=\"Clear Search\">\n\t\t\t\t\t<i  class=\"fas fa-times-circle\"></i>\n\t\t\t\t</span>\n\n\t\t\t</div>\n\n\t\t\t<!-- Control: Feature -->\n\t\t\t<div class=\"controlFeature\" :class=\"controlFeatureClasses\">\n\n\t\t\t\t<!-- Feature: Refresh -->\n\t\t\t\t<span v-if=\"setting.refresh\" @click=\"featureAction('Refresh')\" class=\"controlItem\">\n\t\t\t\t\t<i class=\"fas fa-sync-alt\" title=\"Refresh\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Pagination Select -->\n\t\t\t\t<span v-if=\"rendering.engine === 2\" @click=\"featureAction('Pagination')\" class=\"controlItem\" :class=\"rendering.pagination.changingRows ? 'selected' : ''\">\n\t\t\t\t\t<i class=\"fas fa-scroll\" title=\"Rows Per Page\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Column Select -->\n\t\t\t\t<span v-if=\"setting.columnSelect\" @click=\"featureAction('Columns')\" class=\"controlItem\" :class=\"columns.selecting ? 'selected' : ''\">\n\t\t\t\t\t<i class=\"fas fa-columns\" title=\"Columns\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Filter -->\n\t\t\t\t<span v-if=\"setting.filter\" @click=\"featureAction('Filter')\" class=\"controlItem\" :class=\"controlFilterClasses\">\n\t\t\t\t\t<i class=\"fas fa-filter\" title=\"Filter\"></i>\n\n\t\t\t\t\t<!-- Control: Get Started with Filter Reminder -->\n\t\t\t\t\t<div v-if=\"setting.startBySearchArrowFilter\" class=\"filterArrow\">\n\t\t\t\t{{ setting.startBySearchArrowFilterText }}\n\t\t\t</div>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Export -->\n\t\t\t\t<span v-if=\"setting.export\" @click=\"featureAction('Export')\" class=\"controlItem\">\n\t\t\t\t\t<i class=\"fas fa-file-export\" title=\"Export to Excel\"></i>\n\t\t\t\t</span>\n\n\t\t\t\t<!-- Feature: Maximize/Minimize -->\n\t\t\t\t<span v-if=\"setting.maxMinimize && !setting.forceMaximized\" @click=\"featureAction('MaxMinimize')\" class=\"controlItem\">\n\t\t\t\t\t<i :class=\"minMaxIconClasses\" :title=\"minMaxIconTitle\"></i>\n\t\t\t\t</span>\n\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<!-- Layer: Options -->\n\t\t<div class=\"layerOption\" :style=\"layerOptionStyles\">\n\n\t\t\t<!-- Option: Pagination -->\n\t\t\t<transition name=\"jdTableSlideDown\">\n\t\t\t\t<div v-if=\"rendering.pagination.changingRows\" class=\"optionDropdown\" :style=\"optionDropdownStyles\">\n\n\t\t\t\t\t<!-- Header -->\n\t\t\t\t\t<div class=\"dropdownHeader\">Page Rows</div>\n\n\t\t\t\t\t<!-- Pagination Row List -->\n\t\t\t\t\t<div v-for=\"rows in rendering.pagination.pageRowOptions\" @click=\"changePageRows( rows )\" class=\"dropdownItem paginationItem JD-Clickable\" :class=\"rendering.pagination.currentSelectedPageRowOption === rows ? 'selected' : ''\">\n\t\t\t\t\t\t{{ rows }}\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</transition>\n\n\t\t\t<!-- Option: Column -->\n\t\t\t<transition name=\"jdTableSlideDown\">\n\t\t\t\t<div v-if=\"columns.selecting\" class=\"optionDropdown\" :style=\"optionDropdownStyles\">\n\n\t\t\t\t\t<!-- Header -->\n\t\t\t\t\t<div class=\"dropdownHeader\">Columns</div>\n\n\t\t\t\t\t<!-- Error -->\n\t\t\t\t\t<div v-if=\"columns.selectionError\" class=\"errorMessage\">You must have at least one column enabled.</div>\n\n\t\t\t\t\t<!-- Column List -->\n\t\t\t\t\t<div v-for=\"column in columns.list\" @click=\"columnSelection( column )\" class=\"dropdownItem JD-Clickable\">\n\n\t\t\t\t\t\t<div class=\"columnVisibility\">\n\t\t\t\t\t\t\t<i v-if=\"column.enabled\" class=\"fas fa-eye\"></i>\n\t\t\t\t\t\t\t<i v-else class=\"fas fa-eye-slash notVisible\"></i>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"columnTitle\">\n\t\t\t\t\t\t\t{{ column.title.replace(/(<([^>]+)>)/ig,\"\") }}\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</transition>\n\n\t\t\t<!-- Option: Filtering -->\n\t\t\t<transition name=\"jdTableSlideDown\">\n\t\t\t\t<div v-if=\"filters.show\" class=\"optionDropdown\" :style=\"optionDropdownStyles\">\n\n\t\t\t\t\t<!-- Header -->\n\t\t\t\t\t<div class=\"dropdownHeader\">Filtering</div>\n\n\t\t\t\t\t<!-- Error -->\n\t\t\t\t\t<div v-if=\"filters.error\" class=\"errorMessage\">{{ filters.errorText }}</div>\n\n\t\t\t\t\t<!-- Select Column Input -->\n\t\t\t\t\t<div class=\"dropdownInput carrot JD-Clickable\">\n\t\t\t\t\t\t<div @click=\"filterDropdown(0)\" class=\"label\">\n\t\t\t\t\t\t\t<span>{{ filterColumnText.replace(/(<([^>]+)>)/ig,\"\") }}</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<transition name=\"jdTableFade\">\n\t\t\t\t\t\t\t<ul v-if=\"filters.activeDropdown === 0\">\n\t\t\t\t\t\t\t\t<li v-for=\"( column, index ) in filterableColumns\" @click=\"buildFilter( 0, index )\">\n\t\t\t\t\t\t\t\t\t{{ column.title.replace(/(<([^>]+)>)/ig,\"\") }}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</transition>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Select Filter Input -->\n\t\t\t\t\t<div class=\"dropdownInput carrot JD-Clickable\">\n\t\t\t\t\t\t<div @click=\"filterDropdown(1)\" class=\"label\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{{ filterOptionText }}\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<transition name=\"jdTableFade\">\n\t\t\t\t\t\t\t<ul v-if=\"filters.activeDropdown === 1\">\n\t\t\t\t\t\t\t\t<li v-for=\"( option, index ) in filterableOptions\" @click=\"buildFilter( 1, option )\">\n\t\t\t\t\t\t\t\t\t{{ option }}\n\t\t\t\t\t\t\t\t</li>\n\t\t\t\t\t\t\t</ul>\n\t\t\t\t\t\t</transition>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Select Value Input -->\n\t\t\t\t\t<div class=\"dropdownInput addPadding\">\n\t\t\t\t\t\t<input ref=\"filterInput\" type=\"text\" @input=\"filters.error = false\" v-model=\"filters.beingBuilt.value\" placeholder=\"Value\"/>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Filter Apply Buttons -->\n\t\t\t\t\t<div class=\"dropdownRow separate\">\n\t\t\t\t\t\t<button v-on:click=\"clearAllFilters\" type=\"button\" class=\"JD-Button danger\" title=\"Clear All Filters\">Clear All</button>\n\t\t\t\t\t\t<button v-on:click=\"addFilter\" type=\"button\" class=\"JD-Button success\" title=\"Apply Filter\">Apply</button>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<!-- Header -->\n\t\t\t\t\t<div class=\"dropdownHeader subHeader\">Active Filters</div>\n\n\t\t\t\t\t<!-- Filtered Results -->\n\t\t\t\t\t<div class=\"dropdownHeader smallHeader\">Filtered Results: {{ processedDataSize }}</div>\n\n\t\t\t\t\t<!-- Active Filters -->\n\t\t\t\t\t<div class=\"dropdownInput disabled\" v-for=\"( filter, index ) in filters.active\">\n\t\t\t\t\t\t<div class=\"label\" :title=\"filter.column.title.replace(/(<([^>]+)>)/ig,'') + ' .. ' + filter.option + ' .. ' + filter.value\">\n\t\t\t\t\t\t\t<span>\n\t\t\t\t\t\t\t\t{{ filter.column.title.replace(/(<([^>]+)>)/ig,\"\") }}\n\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Equals To'\" class=\"fas fa-equals\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Not Equals To'\" class=\"fas fa-not-equal\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Greater/Equal To'\" class=\"fas fa-greater-than-equal\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Less/Equal To'\" class=\"fas fa-less-than-equal\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Contains'\" class=\"fas fa-level-down-alt\"></i>\n\t\t\t\t\t\t\t\t<i v-if=\"filter.option === 'Begins With'\" class=\"fas fa-long-arrow-alt-right\"></i>\n\n\t\t\t\t\t\t\t\t\"{{ filter.value }}\"\n\t\t\t\t\t\t\t</span>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<i v-on:click=\"removeFilter( index )\" class=\"fas fa-minus-circle removeIcon JD-Clickable\" title=\"Remove Filter\"></i>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\t\t\t</transition>\n\n\t\t</div>\n\n\t\t<!-- Layer: Content -->\n\t\t<div class=\"layerContent\" ref=\"contentFrame\" :style=\"layerContentStyles\">\n\n\t\t\t<!-- Table Content: Table -->\n\t\t\t<div class=\"table\" :style=\"tableStyles\">\n\n\t\t\t\t<!-- Table: Head -->\n\t\t\t\t<div class=\"head\" :style=\"tableHeadStyles\">\n\n\t\t\t\t\t<div v-for=\"( column, index ) in columns.list\" v-if=\"column.enabled\" @click=\"changeSort( index )\" :title=\"sortTitle( index )\" class=\"cell\" :class=\"columns.activeHover === index ? ( 'hoverAssist' + headCellClasses) : headCellClasses\" :style=\"column.headerStyles\">\n\n\t\t\t\t\t\t<div class=\"cellText\">\n\t\t\t\t\t\t\t<div class=\"title\" v-html=\"column.title\"></div>\n\t\t\t\t\t\t\t<i v-if=\"setting.columnSort && columns.activeSortIndex === index && !columns.activeSortAsc\" class=\"fas fa-sort-alpha-up\"></i>\n\t\t\t\t\t\t\t<i v-if=\"setting.columnSort && columns.activeSortIndex === index && columns.activeSortAsc\" class=\"fas fa-sort-alpha-down\"></i>\n\t\t\t\t\t\t\t<i v-if=\"setting.columnSort && columns.activeSortIndex !== index\" class=\"fas fa-sort-alpha-up hoverSort\"></i>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div v-if=\"resizable\" class=\"resize\" @mousedown=\"resizeStart( index, $event )\" @mousemove=\"resizeDrag( index, $event )\" :class=\"index === columns.activeResize ? 'selected' : ''\"></div>\n\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t\t<!-- Table Body -->\n\t\t\t\t<div class=\"body\" ref=\"bodyData\" :style=\"tableBodyStyles\" @scroll=\"virtualScroll( $event )\" @mouseleave=\"bodyLeave\">\n\n\t\t\t\t\t<div v-if=\"rendering.engine === 0\" class=\"virtualBody\" :style=\"bodyVirtualStyles\"></div>\n\n\t\t\t\t\t<div ref=\"viewData\" :style=\"bodyViewStyles\">\n\t\t\t\t\t\t<div v-if=\"isViewAvailable\" v-for=\"row in view\" @dblclick=\"rowAction( row.index )\" class=\"row\" :class=\"viewRowClasses\" :style=\"viewRowStyles\">\n\t\t\t\t\t\t\t<div v-for=\"( column, columnIndex ) in columns.list\" v-if=\"column.enabled\" class=\"cell\" :class=\"rowDataClasses\" @mouseover=\"cellHover( columnIndex )\" :style=\"column.dataStyles\">\n\t\t\t\t\t\t\t\t{{ row.data[column.name] }}\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<!-- Layer: Footer -->\n\t\t<div v-if=\"setting.footer\" class=\"layerFooter JD-NoneSelectable\" :style=\"layerFooterStyles\">\n\n\t\t\t<div v-if=\"rendering.engine === 2 && processedDataSize\" class=\"pagination\">\n\t\t\t\t<div class=\"paginationDirection left\" :class=\"rendering.pagination.currentPage === 1 ? 'disabled' : ''\">\n\t\t\t\t\t<i @click=\"paginationFirst\" class=\"fas fa-fast-backward start\" title=\"First Page\"></i>\n\t\t\t\t\t<i @click=\"paginationPrevious\" class=\"fas fa-backward\" title=\"Previous Page\"></i>\n\t\t\t\t</div>\n\n\t\t\t\t<div v-if=\"!status.mobileSize\" class=\"paginationRows\">\n\t\t\t\t\tRows&nbsp;<span v-if=\"processedDataSize\">{{ rendering.pagination.currentStartIndex + 1 }} - {{ rendering.pagination.currentEndIndex }} of&nbsp;</span>{{ processedDataSize }}\n\t\t\t\t</div>\n\t\t\t\t<div v-else class=\"paginationRows\">\n\t\t\t\t\t<span v-if=\"processedDataSize\">{{ rendering.pagination.currentStartIndex + 1 }} - {{ rendering.pagination.currentEndIndex }}</span>\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"paginationArea\">\n\n\t\t\t\t\t<div v-if=\"!status.mobileSize\" class=\"paginationList\">\n\t\t\t\t\t\t<div v-if=\"rendering.pagination.leftPages[0] > 1\" class=\"paginationPage\">\n\t\t\t\t\t\t\t<i class=\"fas fa-ellipsis-h\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-for=\"page in rendering.pagination.leftPages\" @click=\"paginationChange( page )\" class=\"paginationPage addHover\" :class=\"page === rendering.pagination.currentPageHightlight ? 'selected' : ''\">\n\t\t\t\t\t\t\t<span>{{ page }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div v-if=\"!status.mobileSize\" class=\"paginationList\">\n\t\t\t\t\t\t<div v-for=\"page in rendering.pagination.rightPages\" @click=\"paginationChange( page )\" class=\"paginationPage addHover\" :class=\"page === rendering.pagination.currentPageHightlight ? 'selected' : ''\">\n\t\t\t\t\t\t\t<span>{{ page }}</span>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div v-if=\"rendering.pagination.rightPages[rendering.pagination.rightPages.length - 1] < rendering.pagination.availablePages\" class=\"paginationPage\">\n\t\t\t\t\t\t\t<i class=\"fas fa-ellipsis-h\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t\t<div class=\"paginationDirection right\" :class=\"rendering.pagination.currentPage === rendering.pagination.availablePages ? 'disabled' : ''\">\n\t\t\t\t\t<i @click=\"paginationNext\" class=\"fas fa-forward\" title=\"Next Page\"></i>\n\t\t\t\t\t<i @click=\"paginationLast\" class=\"fas fa-fast-forward end\" title=\"Last Page\"></i>\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t\t<div v-if=\"( rendering.engine === 0 || rendering.engine === 1 ) && processedDataSize\">\n\t\t\t\t<div class=\"resultRows\" v-show=\"!filters.show\">Rows: {{ processedDataSize }}</div>\n\t\t\t</div>\n\n\t\t</div>\n\n\t\t<!-- Layer: Popup -->\n\t\t<transition name=\"jdTableFade\">\n\t\t\t<!-- Table Error -->\n\t\t\t<div v-if=\"status.tableError\" class=\"layerPopup fullFrame\">\n\t\t\t\t<div class=\"errorMessage\">\n\t\t\t\t\t{{ status.tableError }}\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- No Data Message -->\n\t\t\t<div v-if=\"status.tableReady && !status.processingData && !loader && !isViewAvailable\" class=\"layerPopup contentFrame\">\n\t\t\t\t<div class=\"noDataFrame\">\n\t\t\t\t\t<div class=\"title\">\n\t\t\t\t\t\tNo Data Available\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div v-if=\"filtering\" class=\"filters\">\n\t\t\t\t\t\tTry changing your applied filters.\n\t\t\t\t\t</div>\n\t\t\t\t</div>\n\t\t\t</div>\n\n\t\t\t<!-- Loader -->\n\t\t\t<div v-if=\"loader\" class=\"layerPopup fullFrame JD-Loader\">\n\t\t\t\t<div class=\"fulfilling-square-spinner\">\n\t\t\t\t\t<div class=\"spinner-inner\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<span class=\"loadingText\">Loading ...</span>\n\t\t\t</div>\n\n\t\t\t<!-- Processing -->\n\t\t\t<div v-if=\"status.processingData\" class=\"layerPopup contentFrame\">\n\t\t\t\t<div class=\"fulfilling-square-spinner\">\n\t\t\t\t\t<div class=\"spinner-inner\"></div>\n\t\t\t\t</div>\n\n\t\t\t\t<span class=\"loadingText\">Processing Data</span>\n\t\t\t</div>\n\n\t\t\t<!-- Get Started Messaging -->\n\t\t\t<div v-if=\"!status.processingData && !loader && gettingStarted\" class=\"layerPopup contentFrame\">\n\t\t\t\t<div class=\"tableMessage\" v-html=\"setting.startBySearchMessage\"></div>\n\t\t\t</div>\n\n\t\t\t<!-- Row Content -->\n\t\t\t<div v-if=\"row.selectedIndex !== null\" class=\"layerPopup fullFrame fullFrameZone\">\n\n\t\t\t\t<div class=\"quickView\">\n\n\t\t\t\t\t<div class=\"quickViewHighlight_1\"></div>\n\t\t\t\t\t<div class=\"quickViewHighlight_2\"></div>\n\n\t\t\t\t\t<div class=\"quickViewControl\">\n\t\t\t\t\t\t<div @click=\"print('quickViewContent')\" class=\"controlAction\">\n\t\t\t\t\t\t\t<i class=\"fas fa-print\"></i>\n\t\t\t\t\t\t</div>\n\n\t\t\t\t\t\t<div class=\"controlTitle\">Quick View</div>\n\n\t\t\t\t\t\t<div @click=\"row.selectedIndex = null\" class=\"controlAction\">\n\t\t\t\t\t\t\t<i class=\"fas fa-times\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div ref=\"quickViewContent\" class=\"quickViewContent\" :style=\"quickViewContentStyles\">\n\t\t\t\t\t\t<div v-for=\"column in columns.list\" class=\"contentRow\">\n\t\t\t\t\t\t\t<div class=\"rowTitle\">{{ column.title.replace(/(<([^>]+)>)/ig,\"\") }}</div>\n\t\t\t\t\t\t\t<div class=\"rowData\">{{ data[row.selectedIndex][column.name] }}</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t\t<div class=\"quickViewFooter\">\n\t\t\t\t\t\t<div @click=\"quickViewPrevious\" class=\"footerDirection previous\">\n\t\t\t\t\t\t\t<i class=\"fas fa-backward\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div class=\"footerItem\">\n\t\t\t\t\t\t\t{{ row.selectedIndex + 1 }} of {{ processedDataSize }}\n\t\t\t\t\t\t</div>\n\t\t\t\t\t\t<div @click=\"quickViewNext\" class=\"footerDirection next\">\n\t\t\t\t\t\t\t<i class=\"fas fa-forward\"></i>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\n\t\t\t\t</div>\n\n\t\t\t</div>\n\t\t</transition>\n\n\t</div>\n</template>\n\n<script>\n\texport default\n\t{\n\t\tname : 'JDTable',\n\n\t\tdata ()\n\t\t{\n\t\t\treturn {\n\t\t\t\tstatus :\n\t\t\t\t\t{\n\t\t\t\t\t\ttableReady     : false,\n\t\t\t\t\t\ttableError     : null,\n\t\t\t\t\t\tgetStarted     : false,\n\t\t\t\t\t\tprocessingData : false,\n\t\t\t\t\t\tmobileSize     : false,\n\t\t\t\t\t\tisIE11         : false,\n\t\t\t\t\t\ttableScroll    : false\n\t\t\t\t\t},\n\n\t\t\t\tview : [],\n\t\t\t\tdata : [],\n\n\t\t\t\tfeature :\n\t\t\t\t\t{\n\t\t\t\t\t\tmaximized     : false,\n\t\t\t\t\t\tsearching     : false\n\t\t\t\t\t},\n\n\t\t\t\trendering :\n\t\t\t\t\t{\n\t\t\t\t\t\tengine                  : 0,\n\t\t\t\t\t\trowMiddleIndex          : 0,\n\t\t\t\t\t\trowTopIndex             : 0,\n\t\t\t\t\t\trowBottomIndex          : 0,\n\t\t\t\t\t\ttriggerTopPositionPX    : null,\n\t\t\t\t\t\ttriggerBottomPositionPX : null,\n\t\t\t\t\t\tvirtualHeight           : null,\n\t\t\t\t\t\tisScrolling             : null,\n\t\t\t\t\t\tresettingScroll         : false,\n\t\t\t\t\t\tcontentFrameWidth       : null,\n\t\t\t\t\t\tisResizing              : null,\n\t\t\t\t\t\tpagination              :\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcurrentPage                  : null,\n\t\t\t\t\t\t\t\tcurrentPageHightlight        : null,\n\t\t\t\t\t\t\t\tcurrentStartIndex            : null,\n\t\t\t\t\t\t\t\tcurrentEndIndex              : null,\n\t\t\t\t\t\t\t\tavailablePages               : null,\n\t\t\t\t\t\t\t\tcurrentPageRows              : null,\n\t\t\t\t\t\t\t\tpageRowOptions               : [],\n\t\t\t\t\t\t\t\tchangingRows                 : false,\n\t\t\t\t\t\t\t\tleftPages                    : [],\n\t\t\t\t\t\t\t\trightPages                   : [],\n\t\t\t\t\t\t\t\tcurrentSelectedPageRowOption : null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t},\n\n\t\t\t\tprocessedData : [],\n\n\t\t\t\trow :\n\t\t\t\t\t{\n\t\t\t\t\t\tselectedIndex : null\n\t\t\t\t\t},\n\n\t\t\t\tcolumns :\n\t\t\t\t\t{\n\t\t\t\t\t\tlist               : [],\n\t\t\t\t\t\tactiveHover        : null,\n\t\t\t\t\t\tactiveResize       : null,\n\t\t\t\t\t\tactiveResizeStart  : null,\n\t\t\t\t\t\tactiveSortIndex    : 0,\n\t\t\t\t\t\tactiveSortAsc      : false,\n\t\t\t\t\t\tselecting          : false,\n\t\t\t\t\t\tselectionItemWidth : 25,\n\t\t\t\t\t\tselectionError     : false\n\t\t\t\t\t},\n\n\t\t\t\tsearch :\n\t\t\t\t\t{\n\t\t\t\t\t\ttext      : '',\n\t\t\t\t\t\tsearching : false\n\t\t\t\t\t},\n\n\t\t\t\tfilters :\n\t\t\t\t\t{\n\t\t\t\t\t\tshow           : false,\n\t\t\t\t\t\tactive         : [],\n\t\t\t\t\t\tactiveDropdown : null,\n\t\t\t\t\t\terror          : false,\n\t\t\t\t\t\terrorText      : '',\n\t\t\t\t\t\tbeingBuilt     :\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolumn : null,\n\t\t\t\t\t\t\t\toption : null,\n\t\t\t\t\t\t\t\tvalue  : null\n\t\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t}\n\t\t},\n\n\t\t// ---------------\n\t\t// Component Props\n\t\t// ---------------\n\t\t//\n\t\t// OPTIONS ----\n\t\t//\n\t\t// Prop        : option.columns\n\t\t// Value       : [ARRAY]\n\t\t// Default     : Empty\n\t\t// Description : An array of objects which configure the columns of the table.\n\t\t// Format      : [\n\t\t//\t\t\t\t \t{\n\t\t//\t\t\t\t\t\tname          : [STRING] name of the column in the JSON data.\n\t\t//\t\t\t\t\t\ttitle         : [STRING] title used in the table header.\n\t\t//\t\t\t\t\t\twidth         : [NUMBER] used for the width of the column.\n\t\t//\t\t\t\t\t\t\t          : When option.responsiveTable = FALSE --> Width provided will be PX.\n\t\t//                                    : When option.responsiveTable = TRUE --> Width provided will be %.\n\t\t//\t \t\t\t\t\torder         : [NUMBER] which defines the order of columns from left to right.\n\t\t//                      sort          : [BOOLEAN] sets the column as the initially sorted column.\n\t\t// \t\t\t\t\t    sortDirection : [STRING] sets the direction of the initially sorted column: 'desc' or 'asc'.\n\t\t// \t\t\t\t\t\ttype          : [STRING] which defines the type of data in the column. Options are: 'String' and 'Number'.\n\t\t// \t\t\t\t\t\tfilterable    : [BOOLEAN] which determines if the column can be filtered.\n\t\t// \t\t\t\t\t\tenabled       : [BOOLEAN] which determines if the column is shown/enabled on initial load.\n\t\t//\t\t\t\t\t}\n\t\t//               ]\n\t\t//\n\t\t// Prop        : startBySearch\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Enables/disables the startBySearchMessage when search text or a filter are not applied.\n\t\t//             : This is useful for large dataset's where you don't want to load the entire DB.\n\t\t//             : Instead, this prompts the user to search or apply a filter to view any data.\n\t\t//\n\t\t// Prop        : startBySearchMessage\n\t\t// Value       : [STRING]\n\t\t// Default     : NULL\n\t\t// Description : Message which will be displayed when no search/filter is being applied.\n\t\t//\n\t\t// Prop        : startBySearchArrowSearch\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : NULL\n\t\t// Description : When startBySearchMessage is active, displays a pointer to the search box.\n\t\t//\n\t\t// Prop        : startBySearchArrowFilter\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : NULL\n\t\t// Description : When startBySearchMessage is active, displays a pointer to the filter box.\n\t\t//\n\t\t// Prop        : startBySearchArrowSearchText\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : NULL\n\t\t// Description : Text to be displayed when startBySearchArrorSearch is enabled.\n\t\t//\n\t\t// Prop        : startBySearchArrowFilterText\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : NULL\n\t\t// Description : Text to be displayed when startBySearchArrorFilter is enabled.\n\t\t//\n\t\t// Prop        : option.maxMinimize\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the min/maximize feature button.\n\t\t//\n\t\t// Prop        : option.refresh\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the refresh feature button.\n\t\t//\n\t\t// Prop        : option.search\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the search feature button/input.\n\t\t//\n\t\t// Prop        : option.columnSelect\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the column select feature.\n\t\t//\n\t\t// Prop        : option.resize\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables resizing of columns. Only works when responsiveTable is set to FALSE.\n\t\t//\n\t\t// Prop        : option.filter\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the filter feature.\n\t\t//\n\t\t// Prop        : option.export\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the export to excel feature. Not compatible with IE11 or lower.\n\t\t//\n\t\t// Prop        : option.columnSort\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the ability to sort by column.\n\t\t//\n\t\t// Prop        : option.quickView\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enables/disables the ability to double click on a row and show a quick view of all its data.\n\t\t//\n\t\t// -----\n\t\t// | 0 | FULL    : All rows of data will be provided to JD-Table allowing the table to manage the view, search, filtering, pagination itself.\n\t\t// | 1 | REQUEST : All data related actions will be emitted to the parent to be processed. The parent in turn will the data details back to the JD-Table.\n\t\t// -----\n\t\t//\n\t\t// Prop        : option.renderEngine\n\t\t// Value       : [NUMBER]\n\t\t// Default     : NULL\n\t\t// Description : Selects the rendering engine JD-Table uses when rendering rows of data.\n\t\t//\n\t\t// -----\n\t\t// | 0 | VIRTUAL    : Render only a small amount of rows based on the table view size. Use this for large tables.\n\t\t// | 1 | ALL        : Render all rows regardless of how many there are.\n\t\t// | 2 | PAGINATION : Render a specific number of rows and enables 'Next'/'Previous' buttons.\n\t\t// -----\n\t\t//\n\t\t// -------------------------------------\n\t\t// | responsiveFrame | responsiveTable |\n\t\t// | true            | true            | : Frame fits parent & columns are auto adjusted (%).\n\t\t// | true            | false           | : Frame fits parent to a min-width of sum of columns & column are set (PX) size.\n\t\t// | false           | true            | : Frame is set (PX) size & column are auto adjusted (%).\n\t\t// | false           | false           | : Frame is set (PX) size and columns are set (PX) size.\n\t\t// -------------------------------------\n\t\t//\n\t\t// Prop        : option.responsiveFrame\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Renders the entire JD-Table frame responsively or not.\n\t\t//\n\t\t// ---------\n\t\t// | TRUE  | : Renders the entire JD-Table responsively. It will fit to the parent container.\n\t\t// | FALSE | : Renders the entire JD-Table to the width set to the option.frameWidth in pixels.\n\t\t// ---------\n\t\t//\n\t\t// Prop        : option.responsiveTable\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Renders the data table within JD-Table responsively or not.\n\t\t//\n\t\t// ---------\n\t\t// | TRUE  | : Renders the data table responsively to the width of the entire JD-Table frame.\n\t\t// | FALSE | : Renders the data table according to the option.columns.width values for each column.\n\t\t// ---------\n\t\t//\n\t\t// Prop        : option.virtualEngineRowStart\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 250\n\t\t// Description : Indicates the amount of rows that if the data exceeds will trigger the virtual rendering engine.\n\t\t//             : Only used when renderEngine is set to 0 (auto).\n\t\t//\n\t\t// Prop        : option.frameWidth\n\t\t// Value       : [NUMBER]\n\t\t// Default     : Null\n\t\t// Description : A number value (PX) which will be assigned to the width of JD-Table when option.responsiveFrame is set to False.\n\t\t//\n\t\t// Prop        : option.headerHeight\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 40\n\t\t// Description : A number value (PX) which will applied to the table header row height.\n\t\t//\n\t\t// Prop        : option.dataHeight\n\t\t// Value       : [NUMBER]\n\t\t// Default     : NULL\n\t\t// Description : A number value (PX) which will applied to the data table body height. Null = 100%.\n\t\t//\n\t\t// Prop        : option.rowHeight\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 42\n\t\t// Description : A number value (PX) which will applied as the height for each data row.\n\t\t//\n\t\t// Prop        : option.paginationRowLimits\n\t\t// Value       : [ARRAY]\n\t\t// Default     : [20, 50, 100]\n\t\t// Description : Array of numbers that will be provided as options for how many rows appear per page (pagination engine).\n\t\t//\n\t\t// Prop        : option.paginationRowStart\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 20\n\t\t// Description : A number that will be used as the default selection for how many rows to appear per page (pagination engine).\n\t\t//\n\t\t// Prop        : option.paginationRowAll\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Enable/disable the \"ALL\" option for how many rows to appear per page (pagination).\n\t\t//\n\t\t// Prop        : option.pageSideQuantity\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 5\n\t\t// Description : The number of page choices that will be available on either side of the row display on the footer. (pagination engine).\n\t\t//\n\t\t// Prop        : option.searchEngine\n\t\t// Value       : [NUMBER]\n\t\t// Default     : 0\n\t\t// Description : Sets the search engine that will be used when search is performed.\n\t\t//\n\t\t// -----\n\t\t// | 0 | : JD-Table will search the data that it has available to it.\n\t\t// | 1 | : JD-Table will emit a search event to the parent so it can manage how search is performed.\n\t\t// -----\n\t\t//\n\t\t// Prop        : option.forceSearchOpen\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Force search to be open and cannot be closed.\n\t\t//\n\t\t// Prop        : option.searchPlaceHolder\n\t\t// Value       : [STRING]\n\t\t// Default     : NULL\n\t\t// Description : The placeholder text for the search input box.\n\t\t//\n\t\t//\n\t\t// Prop        : option.startMaximized\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Renders the table maximized.\n\t\t//\n\t\t// Prop        : option.forceMaximized\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : False\n\t\t// Description : Renders the table maximized and removes the min/maximize button.\n\t\t//\n\t\t// Prop        : option.rowZebra\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Renders all even rows with a light background.\n\t\t//\n\t\t// Prop        : option.rowFlex\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : Allows the row height to be flexible according to the data in the columns.\n\t\t//\n\t\t// Prop        : option.resizeForceMinWidth\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : True\n\t\t// Description : When enabled, columns cannot be resized smaller then their initial option.column.width.\n\t\t// \t\t\t   : Only applies when option.resize is enabled.\n\t\t//\n\t\t// Prop        : option.highlight\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : true\n\t\t// Description : Renders the top highlight bar on the frame.\n\t\t//\n\t\t// Prop        : option.controls\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : true\n\t\t// Description : Renders the control bar.\n\t\t//\n\t\t// Prop        : option.footer\n\t\t// Value       : [BOOLEAN]\n\t\t// Default     : true\n\t\t// Description : Renders the footer. Must be true for pagination.\n\t\t//\n\t\t// Prop        : option.title\n\t\t// Value       : [STRING]\n\t\t// Default     : Null\n\t\t// Description : Display's a title at the top of the table.\n\t\t//\n\t\t// EVENT ----\n\t\t//\n\t\t// Prop        : event.name\n\t\t// Value       : [STRING]\n\t\t// Default     : ''\n\t\t// Description : Name of event you want to trigger on JD-Table.\n\t\t//\n\t\t// Prop        : event.payload\n\t\t// Value       : [ANY]\n\t\t// Default     : NULL\n\t\t// Description : Optional payload for the event.\n\t\tprops :\n\t\t\t{\n\t\t\t\toption :\n\t\t\t\t\t{\n\t\t\t\t\t\ttype    : Object,\n\t\t\t\t\t\tdefault : () => ({})\n\t\t\t\t\t},\n\n\t\t\t\tevent :\n\t\t\t\t\t{\n\t\t\t\t\t\ttype    : Object,\n\t\t\t\t\t\tdefault : () =>\n\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\tname    : null,\n\t\t\t\t\t\t\t\tpayload : null\n\t\t\t\t\t\t\t})\n\t\t\t\t\t},\n\n\t\t\t\tloader :\n\t\t\t\t\t{\n\t\t\t\t\t\ttype    : Boolean,\n\t\t\t\t\t\tdefault : true\n\t\t\t\t\t}\n\t\t\t},\n\n\t\tcreated : function ()\n\t\t{\n\t\t\t// Checks if browser is IE11.\n\t\t\tif( navigator.userAgent.indexOf('MSIE')!==-1  || navigator.appVersion.indexOf('Trident/') > -1 )\n\t\t\t{\n\t\t\t\tthis.status.isIE11 = true;\n\t\t\t}\n\t\t\telse\n\t\t\t{\n\t\t\t\tthis.status.isIE11 = !!window.MSInputMethodContext && !!document.documentMode\n\t\t\t}\n\n\t\t\tthis.initializeTable();\n\t\t},\n\n\t\tmounted : function ()\n\t\t{\n\t\t\t// Add an event listener to watch for a window resize. If detected, re-render the list.\n\t\t\twindow.addEventListener( 'resize', ()=>\n\t\t\t{\n\t\t\t\t// Clear the scrolling timer.\n\t\t\t\tclearTimeout( this.rendering.isResizing );\n\n\t\t\t\tthis.rendering.isResizing = setTimeout( () =>\n\t\t\t\t{\n\t\t\t\t\t// If auto rendering is the engine, re-render.\n\t\t\t\t\tif ( this.rendering.engine === 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.renderView( this.rendering.rowMiddleIndex );\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.checkMobile();\n\t\t\t\t}, 750 );\n\t\t\t});\n\t\t},\n\n\t\tmethods :\n\t\t\t{\n\t\t\t\t// Configures the table according to the init props.\n\t\t\t\tinitializeTable : function ()\n\t\t\t\t{\n\t\t\t\t\t// Create reactive column settings.\n\t\t\t\t\tconst INIT_COLUMNS = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Ensure columns are defined.\n\t\t\t\t\t\tif ( typeof( this.setting.columns ) === 'object' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.setting.columns.forEach( ( userColumn, index ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ( typeof( userColumn.name ) !== 'string' )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One of the defined columns does not have a name assigned.';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( typeof( userColumn.title ) !== 'string' )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One of the defined columns does not have a title assigned.';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( typeof( userColumn.order ) !== 'number' )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One of the defined columns does not have a order assigned.';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( typeof( userColumn.type ) !== 'string' )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One of the defined columns does not have a type assigned.';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Sets the column as default sorted.\n\t\t\t\t\t\t\t\tif ( userColumn.sort )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.columns.activeSortIndex = index;\n\n\t\t\t\t\t\t\t\t\tif ( typeof( userColumn.sortDirection ) === 'string' )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( userColumn.sortDirection === 'asc' )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tthis.columns.activeSortAsc = false;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Set column width value.\n\t\t\t\t\t\t\t\tlet columnWidth = null;\n\n\t\t\t\t\t\t\t\tif ( typeof( userColumn.width ) === 'number' )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tcolumnWidth = userColumn.width;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Set initial visibility value.\n\t\t\t\t\t\t\t\tlet enabled = true;\n\n\t\t\t\t\t\t\t\tif ( typeof( userColumn.enabled ) === 'boolean' && !userColumn.enabled )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tenabled = false;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Set filterable value.\n\t\t\t\t\t\t\t\tlet filterable = false;\n\n\t\t\t\t\t\t\t\tif ( typeof( userColumn.filterable ) === 'boolean' && userColumn.filterable )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tfilterable = true;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list, index,\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tname         : userColumn.name,\n\t\t\t\t\t\t\t\t\t\ttitle        : userColumn.title,\n\t\t\t\t\t\t\t\t\t\twidth        : columnWidth,\n\t\t\t\t\t\t\t\t\t\torder        : userColumn.order,\n\t\t\t\t\t\t\t\t\t\ttype         : userColumn.type,\n\t\t\t\t\t\t\t\t\t\tfilterable   : filterable,\n\t\t\t\t\t\t\t\t\t\tenabled      : enabled,\n\t\t\t\t\t\t\t\t\t\theaderStyles : {},\n\t\t\t\t\t\t\t\t\t\tdataStyles   : {}\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t// Sort the array based on the passed order.\n\t\t\t\t\t\t\tthis.columns.list.sort( ( a, b ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn a.order - b.order;\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. Columns are not defined.'\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Determine maximized state.\n\t\t\t\t\tconst SETUP_MAXIMIZE = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.forceMaximized || this.setting.startMaximized )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.feature.maximized = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Check for table & column widths and calculate fixed table full width.\n\t\t\t\t\tconst SETUP_SIZES = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet noWidthColumns = 0;\n\n\t\t\t\t\t\t// Check how many columns have no width assigned.\n\t\t\t\t\t\tthis.columns.list.forEach( ( column ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( column.width === null )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tnoWidthColumns++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// If the table should be responsive, but the sum of the widths is Greater/Equal To 100%. Throw an error.\n\t\t\t\t\t\tif ( this.setting.responsiveTable && this.tableWidth > 100 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.tableError =  'Error: Invalid settings. The sum of the individual column widths is greater then 100%. Ensure your columns are balanced.'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( !this.setting.responsiveFrame && this.setting.frameWidth === null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.tableError =  'Error: Invalid settings. The setting frameWidth is not configured. In order to use responsiveTable = FALSE you must set a frameWidth. The frame will now operate @ 100% and not function correctly.'\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Set the column width for each column.\n\t\t\t\t\t\tthis.columns.list.forEach( ( column, index ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// If the column has an assigned width ..\n\t\t\t\t\t\t\tif ( column.width !== null )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// If the table is NOT responsive, the width is PX.\n\t\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'width', column.width + 'px' );\n\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'min-width', column.width + 'px' );\n\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'height', this.setting.headerHeight + 'px' );\n\n\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'width', column.width + 'px' );\n\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'min-width', column.width + 'px' );\n\n\t\t\t\t\t\t\t\t\tif ( this.setting.rowFlex )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'min-height', this.setting.rowHeight + 'px' );\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// If the table IS responsive, the width is %.\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'width', column.width + '%' );\n\t\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'width', column.width + '%' );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t// If no width is assigned to the column ..\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// If the table is NOT responsive throw an error. This is because column widths are in PX.\n\t\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.status.tableError = 'Error: Invalid settings. One or more of the columns does not have an assigned width. When the setting responsiveTable is set to false, all columns must have a specified width. Rendering table as responsive instead.';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Calculate the width out of the remaining percentage.\n\t\t\t\t\t\t\t\tlet autoColumnWidth = ( 100 - this.tableWidth ) / noWidthColumns;\n\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].headerStyles, 'width', autoColumnWidth + '%' );\n\t\t\t\t\t\t\t\tthis.$set( this.columns.list[index].dataStyles, 'width', autoColumnWidth + '%' );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t};\n\n\t\t\t\t\t// Initialize pagination settings.\n\t\t\t\t\tconst SETUP_PAGINATION = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.renderEngine === 2 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Sets the current page if none is set.\n\t\t\t\t\t\t\tconst INIT_CURRENT_PAGE = () =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ( !this.rendering.pagination.currentPage )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.rendering.pagination.currentPage = 1;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Sets the current max number of rows per page if none is set.\n\t\t\t\t\t\t\tconst INIT_CURRENT_PAGE_ROWS = () =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ( !this.rendering.pagination.currentPageRows )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.rendering.pagination.currentPageRows              = this.setting.paginationRowStart;\n\t\t\t\t\t\t\t\t\tthis.rendering.pagination.currentSelectedPageRowOption = this.setting.paginationRowStart;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Sets the options available for how many rows will appear on a page.\n\t\t\t\t\t\t\tconst SET_ROW_OPTIONS = () =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.rendering.pagination.pageRowOptions = this.setting.paginationRowLimits;\n\n\t\t\t\t\t\t\t\tif ( this.setting.paginationRowAll )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.rendering.pagination.pageRowOptions.push('All');\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\tINIT_CURRENT_PAGE();\n\t\t\t\t\t\t\tINIT_CURRENT_PAGE_ROWS();\n\t\t\t\t\t\t\tSET_ROW_OPTIONS();\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Force disables features if browser is IE11.\n\t\t\t\t\tconst BROWSER_CHECK = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.status.isIE11 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Export is not compatible with IE11.\n\t\t\t\t\t\t\tif ( this.setting.export )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.setting.export = false;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Configure the search option.\n\t\t\t\t\tconst SETUP_SEARCH = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.forceSearchOpen )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.feature.searching = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\tINIT_COLUMNS();\n\t\t\t\t\tSETUP_MAXIMIZE();\n\t\t\t\t\tSETUP_SIZES();\n\t\t\t\t\tSETUP_PAGINATION();\n\t\t\t\t\tSETUP_SEARCH();\n\t\t\t\t\tBROWSER_CHECK();\n\t\t\t\t},\n\n\t\t\t\t// Manages all feature actions.\n\t\t\t\tfeatureAction : function ( name )\n\t\t\t\t{\n\t\t\t\t\t// Switches the maximize flag.\n\t\t\t\t\tconst MAXIMIZE = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.feature.maximized = !this.feature.maximized;\n\n\t\t\t\t\t\t// Re-render the rows based on the new window size.\n\t\t\t\t\t\tif ( !this.rendering.engine )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.renderView( this.rendering.rowMiddleIndex );\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Shows/hides the search input field.\n\t\t\t\t\tconst SEARCH = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( !this.setting.forceSearchOpen )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.feature.searching = !this.feature.searching;\n\n\t\t\t\t\t\t\tif ( this.feature.searching )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Waits for the search bar to be visible then focuses it.\n\t\t\t\t\t\t\t\tsetTimeout( () =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.$refs.searchField.focus();\n\t\t\t\t\t\t\t\t}, 150)\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Emits a refresh event.\n\t\t\t\t\tconst REFRESH = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.$emit('refresh');\n\t\t\t\t\t};\n\n\t\t\t\t\t// Show/Hide the filtering view.\n\t\t\t\t\tconst FILTER = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.show = !this.filters.show;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Clean up any filter interface/variable settings when a feature button is pressed.\n\t\t\t\t\tconst FILTER_CLEAN_UP = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Reset any filter errors that may exist.\n\t\t\t\t\t\tthis.filters.error     = false;\n\t\t\t\t\t\tthis.filters.errorText = '';\n\n\t\t\t\t\t\t// Clear filters if shown.\n\t\t\t\t\t\tif ( this.filters.show )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.filters.show = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Show/Hide the column selection.\n\t\t\t\t\tconst COLUMNS = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.columns.selecting = !this.columns.selecting;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Clean up any column selection interface/variable settings when feature button is pressed.\n\t\t\t\t\tconst COLUMNS_CLEAN_UP = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.columns.selecting = false;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Show/hide the pagination row changing option.\n\t\t\t\t\tconst PAGINATION = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rendering.pagination.changingRows = !this.rendering.pagination.changingRows;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Clean up any pagination row changing options.\n\t\t\t\t\tconst PAGINATION_CLEAN_UP = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rendering.pagination.changingRows = false;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Exports the current available data to excel.\n\t\t\t\t\tconst EXPORT = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Creates a HTML table to be exported.\n\t\t\t\t\t\tconst renderTable = () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tvar table = '<table><thead>';\n\n\t\t\t\t\t\t\ttable += '<tr>';\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < this.columns.list.length; i++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconst column = this.columns.list[i];\n\n\t\t\t\t\t\t\t\ttable += '<th>';\n\n\t\t\t\t\t\t\t\tif ( typeof( column.title ) === 'undefined' )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttable += column.name;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\ttable += column.title;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\ttable += '</th>';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttable += '</tr>';\n\n\t\t\t\t\t\t\ttable += '</thead><tbody>';\n\n\t\t\t\t\t\t\tfor ( let i = 0; i < this.processedData.length; i++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tconst row = this.processedData[i];\n\n\t\t\t\t\t\t\t\ttable += '<tr>';\n\n\t\t\t\t\t\t\t\tfor ( var j = 0; j < this.columns.list.length; j++ )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tconst column = this.columns.list[j];\n\n\t\t\t\t\t\t\t\t\ttable += '<td>';\n\t\t\t\t\t\t\t\t\ttable += row[column.name];\n\t\t\t\t\t\t\t\t\ttable += '</td>';\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\ttable += '</tr>';\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\ttable += '</tbody></table>';\n\n\t\t\t\t\t\t\treturn table;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\tconst mimeType       = 'data:application/vnd.ms-excel;';\n\t\t\t\t\t\tconst htmlTable      = renderTable().replace(/ /g, '%20');\n\t\t\t\t\t\tconst documentPrefix = 'Export';\n\t\t\t\t\t\tconst d              = new Date();\n\t\t\t\t\t\tlet dummy            = document.createElement('a');\n\n\t\t\t\t\t\tdummy.href     = mimeType + ', ' + htmlTable;\n\t\t\t\t\t\tdummy.download = documentPrefix\n\t\t\t\t\t\t\t+ '-' + d.getFullYear() + '-' + (d.getMonth()+1) + '-' + d.getDate()\n\t\t\t\t\t\t\t+ '-' + d.getHours() + '-' + d.getMinutes() + '-' + d.getSeconds()\n\t\t\t\t\t\t\t+'.xls';\n\t\t\t\t\t\tdummy.click();\n\t\t\t\t\t};\n\n\t\t\t\t\tif ( name === 'MaxMinimize' )\n\t\t\t\t\t{\n\t\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\n\t\t\t\t\t\tMAXIMIZE();\n\t\t\t\t\t}\n\t\t\t\t\telse if ( name === 'Search' )\n\t\t\t\t\t{\n\t\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\n\t\t\t\t\t\tSEARCH();\n\t\t\t\t\t}\n\t\t\t\t\telse if ( name === 'Refresh' )\n\t\t\t\t\t{\n\t\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\t\tPAGINATION_CLEAN_UP();\n\n\t\t\t\t\t\tREFRESH();\n\t\t\t\t\t}\n\t\t\t\t\telse if ( name === 'Columns' )\n\t\t\t\t\t{\n\t\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\t\tPAGINATION_CLEAN_UP();\n\n\t\t\t\t\t\tCOLUMNS();\n\t\t\t\t\t}\n\t\t\t\t\telse if ( name === 'Filter' )\n\t\t\t\t\t{\n\t\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\t\tPAGINATION_CLEAN_UP();\n\n\t\t\t\t\t\tFILTER();\n\t\t\t\t\t}\n\t\t\t\t\telse if ( name === 'Pagination' )\n\t\t\t\t\t{\n\t\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\t\tFILTER_CLEAN_UP();\n\n\t\t\t\t\t\tPAGINATION();\n\t\t\t\t\t}\n\t\t\t\t\telse if ( name === 'Export' )\n\t\t\t\t\t{\n\t\t\t\t\t\tFILTER_CLEAN_UP();\n\t\t\t\t\t\tCOLUMNS_CLEAN_UP();\n\t\t\t\t\t\tPAGINATION_CLEAN_UP();\n\n\t\t\t\t\t\tEXPORT();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Processes the raw data through filters/search. This returns a promise.\n\t\t\t\tprocessData : function ()\n\t\t\t\t{\n\t\t\t\t\t// Start processing visual.\n\t\t\t\t\tthis.status.processingData = true;\n\n\t\t\t\t\treturn new Promise( ( resolve, reject ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Timeout ensures processing message.\n\t\t\t\t\t\tsetTimeout( () => {\n\t\t\t\t\t\t\tlet processedData = this.data;\n\n\t\t\t\t\t\t\t// ---------\n\t\t\t\t\t\t\t// SEARCHING\n\t\t\t\t\t\t\t// ---------\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// Search terms filter all of the data that JD-Table has. This means search happens before filtering.\n\t\t\t\t\t\t\tif ( !this.setting.searchEngine )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Clean the search term.\n\t\t\t\t\t\t\t\tlet searchTerm = this.search.text.trim().toLowerCase();\n\n\t\t\t\t\t\t\t\t// If a search term exists, search it.\n\t\t\t\t\t\t\t\tif ( searchTerm )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Indicate that searching is being done.\n\t\t\t\t\t\t\t\t\tthis.search.searching = true;\n\n\t\t\t\t\t\t\t\t\tprocessedData = processedData.filter ( ( row ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Define the search pattern for various column type date: String/Number/Array.\n\t\t\t\t\t\t\t\t\t\tconst searchAlgorithm = ( column ) =>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t// Search a column which is made up of an array or strings.\n\t\t\t\t\t\t\t\t\t\t\tif ( column.type === 'Array' )\n\t\t\t\t\t\t\t\t\t\t\t{\n\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t// Search a column which is made up of strings or numbers.\n\t\t\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tlet searchText = String( row[column.name] ).toLowerCase();\n\n\t\t\t\t\t\t\t\t\t\t\t\t// Casts number variables to strings to make the searchable with Strings.\n\t\t\t\t\t\t\t\t\t\t\t\tif ( searchText.includes( searchTerm ) )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t\t\t// If the search algorithm function returns true, that row is kept (not filtered).\n\t\t\t\t\t\t\t\t\t\treturn this.columns.list.find( searchAlgorithm );\n\t\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Indicate that searching is NOT being done.\n\t\t\t\t\t\t\t\t\tthis.search.searching = false;\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// ---------\n\t\t\t\t\t\t\t// FILTERING\n\t\t\t\t\t\t\t// ---------\n\t\t\t\t\t\t\t//\n\t\t\t\t\t\t\t// Filters are applied using the following rules:\n\t\t\t\t\t\t\t// - Filters with the same column are grouped together and use the OR condition (excluding < and > which are AND)\n\t\t\t\t\t\t\t// \t - Filter #1: 'Column1' --> 'Equals To' --> 'John'\n\t\t\t\t\t\t\t//   - Filter #2: 'Column1' --> 'Equals To' --> 'Peter'\n\t\t\t\t\t\t\t//   - Applied: Show rows where 'Column1' --> 'Equals To' --> 'John' OR 'Peter'\n\t\t\t\t\t\t\t// - Filters applied to different columns use AND condition.\n\t\t\t\t\t\t\t//   - Filter #1: 'Column1' --> 'Equals To' --> 'John'\n\t\t\t\t\t\t\t//   - Filter #2: 'Column2' --> 'Equals To' --> '$100.00'\n\t\t\t\t\t\t\t//   - Applied: Show rows where 'Column1' --> 'Equals To' --> 'John' AND 'Column2' 'Equals To' --> '$100.00'\n\t\t\t\t\t\t\tif ( this.filtering )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet tempData = [];\n\n\t\t\t\t\t\t\t\t// Returns a unique array of column names that are actively filtered.\n\t\t\t\t\t\t\t\tconst UNIQUE_FILTER_COLUMNS = () =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlet columnSet     = new Set( this.filters.active.map( ( filter ) => filter.column.name ) );\n\t\t\t\t\t\t\t\t\tlet uniqueColumns = [];\n\n\t\t\t\t\t\t\t\t\tcolumnSet.forEach( ( column ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tuniqueColumns.push( column );\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\treturn uniqueColumns;\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Equals To (String Based).\n\t\t\t\t\t\t\t\tconst FILTER_EQUALS_TO = ( row, columnFilter ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase() === String(columnFilter.value).toLowerCase() );\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Not Equals To (String Based).\n\t\t\t\t\t\t\t\tconst FILTER_NOT_EQUALS_TO = ( row, columnFilter ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase() !== String(columnFilter.value).toLowerCase() );\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Begins With (String Based).\n\t\t\t\t\t\t\t\tconst FILTER_BEGINS_WITH = ( row, columnFilter ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase().startsWith(String(columnFilter.value).toLowerCase()) );\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Contains (String Based).\n\t\t\t\t\t\t\t\tconst FILTER_CONTAINS = ( row, columnFilter ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn ( String( row[columnFilter.column.name]).toLowerCase().includes(String(columnFilter.value).toLowerCase()) );\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Performs filter: Greater and Less/Equal To (Number Based).\n\t\t\t\t\t\t\t\tconst FILTER_GREATER_LESS_THAN = ( row, columnName, greaterThanValue, lessThanValue ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tlet columnNumber = Number( row[columnName] );\n\n\t\t\t\t\t\t\t\t\tif ( greaterThanValue && lessThanValue )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( columnNumber >= greaterThanValue && columnNumber <= lessThanValue )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( greaterThanValue && !lessThanValue )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( columnNumber >= greaterThanValue )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\tif ( !greaterThanValue && lessThanValue )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tif ( columnNumber <= lessThanValue )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\treturn false;\n\t\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t\t// Cycle through the unique column filters.\n\t\t\t\t\t\t\t\tUNIQUE_FILTER_COLUMNS().forEach( ( columnName, index ) =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Will hold the data that will be filtered.\n\t\t\t\t\t\t\t\t\tlet dataToBeFiltered = [];\n\n\t\t\t\t\t\t\t\t\t// Will hold the new set of filtered data.\n\t\t\t\t\t\t\t\t\tlet newFilteredData = [];\n\n\t\t\t\t\t\t\t\t\t// On first pass (for the first column), use all the data available.\n\t\t\t\t\t\t\t\t\tif ( index === 0 )\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdataToBeFiltered = processedData;\n\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t// On second pass (next column) use existing filtered data.\n\t\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\tdataToBeFiltered = tempData;\n\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t// Get all of the filters for the given column.\n\t\t\t\t\t\t\t\t\tlet columnFilters = this.filters.active.filter( ( filter ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\treturn filter.column.name === columnName;\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// Stores numeric comparison values.\n\t\t\t\t\t\t\t\t\tlet greaterThanValue = null;\n\t\t\t\t\t\t\t\t\tlet lessThanValue    = null;\n\n\n\t\t\t\t\t\t\t\t\t// Check for Greater/Equal To / Less/Equal To filters which should be grouped.\n\t\t\t\t\t\t\t\t\tcolumnFilters.forEach( ( columnFilter ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Store greater then for\n\t\t\t\t\t\t\t\t\t\tif ( columnFilter.option === 'Greater/Equal To' )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tgreaterThanValue = columnFilter.value;\n\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\tif ( columnFilter.option === 'Less/Equal To' )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tlessThanValue = columnFilter.value;\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// For each row of data, check the column filter. If any single filter passes, add the row and move to the next.\n\t\t\t\t\t\t\t\t\tdataToBeFiltered.forEach( ( row, index ) =>\n\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t// Indicates if the row has been added to the newly filtered array.\n\t\t\t\t\t\t\t\t\t\tlet hasBeenPushed = false;\n\n\t\t\t\t\t\t\t\t\t\t// Process string based filters.\n\t\t\t\t\t\t\t\t\t\tcolumnFilters.forEach( ( columnFilter ) =>\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Equals To\n\t\t\t\t\t\t\t\t\t\t\tif ( columnFilter.option === 'Equals To' )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_EQUALS_TO( row, columnFilter ) )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Contains\n\t\t\t\t\t\t\t\t\t\t\tif ( !hasBeenPushed && columnFilter.option === 'Contains' )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_CONTAINS( row, columnFilter ) )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Not Equals To\n\t\t\t\t\t\t\t\t\t\t\tif ( !hasBeenPushed && columnFilter.option === 'Not Equals To' )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_NOT_EQUALS_TO( row, columnFilter ) )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t\t\t\t// FILTER: Begins With\n\t\t\t\t\t\t\t\t\t\t\tif ( !hasBeenPushed && columnFilter.option === 'Begins With' )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_BEGINS_WITH( row, columnFilter ) )\n\t\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\n\t\t\t\t\t\t\t\t\t\t\t\t\thasBeenPushed = true;\n\t\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t\t// Check if there are numeric specific operations.\n\t\t\t\t\t\t\t\t\t\tif ( greaterThanValue || lessThanValue )\n\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\tif ( FILTER_GREATER_LESS_THAN( row, columnName, greaterThanValue, lessThanValue ) )\n\t\t\t\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t\t\t\tnewFilteredData.push( row );\n\t\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\t\t// Replace the tempData with the newly filtered data.\n\t\t\t\t\t\t\t\t\ttempData = newFilteredData;\n\t\t\t\t\t\t\t\t});\n\n\t\t\t\t\t\t\t\tprocessedData = tempData;\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\tthis.processedData = processedData;\n\n\t\t\t\t\t\t\t// Stop processing visual.\n\t\t\t\t\t\t\tthis.status.processingData = false;\n\n\t\t\t\t\t\t\t// End the promise.\n\t\t\t\t\t\t\tresolve();\n\t\t\t\t\t\t}, 75);\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t// Processes the passed event.\n\t\t\t\tprocessEvent : function ( name )\n\t\t\t\t{\n\t\t\t\t\t// Process the data sent to JD-Table.\n\t\t\t\t\tif ( !this.status.tableError && name === 'sendData' )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.event.payload !== null && this.event.payload.constructor.name === 'Array' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( this.event.payload.length > 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Assign the data to the component.\n\t\t\t\t\t\t\t\tthis.data = this.event.payload;\n\n\t\t\t\t\t\t\t\t// Reset scroll position.\n\t\t\t\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\t// Render the data.\n\t\t\t\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t\t\t\t});\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.view = [];\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Set the table to ready.\n\t\t\t\t\t\t\tthis.status.tableReady = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.tableError = 'Error: sendData event issue. Payload is null or improperly formatted.';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Processes a Table Message event to JD-Table.\n\t\t\t\t\tif ( name === 'displayMessage' )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.event.payload !== null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.tableMessage = this.event.payload;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Renders the correct view based on the data and rendering engine setting.\n\t\t\t\trenderView : function ( renderPosition = 0 )\n\t\t\t\t{\n\t\t\t\t\t// Start processing visual.\n\t\t\t\t\tthis.status.processingData = true;\n\n\t\t\t\t\t// Timeout ensures processing message.\n\t\t\t\t\tsetTimeout( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Check mobile size.\n\t\t\t\t\t\tthis.checkMobile();\n\n\t\t\t\t\t\t// Sort the data.\n\t\t\t\t\t\tthis.sortData();\n\n\t\t\t\t\t\tif ( this.processedDataSize > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Rendering Engine: Auto\n\t\t\t\t\t\t\tif ( !this.setting.renderEngine )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Render full.\n\t\t\t\t\t\t\t\tif ( this.processedDataSize <= this.setting.virtualEngineRowStart )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.rendering.engine = 1;\n\n\t\t\t\t\t\t\t\t\tthis.renderViewAll();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Render virtual.\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.rendering.engine = 0;\n\n\t\t\t\t\t\t\t\t\tthis.renderViewVirtual( renderPosition );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Render All.\n\t\t\t\t\t\t\t\tif ( this.setting.renderEngine === 1 )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.rendering.engine = 1;\n\n\t\t\t\t\t\t\t\t\tthis.renderViewAll();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t\t// Render Pagination\n\t\t\t\t\t\t\t\tif ( this.setting.renderEngine === 2 )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.rendering.engine = 2;\n\n\t\t\t\t\t\t\t\t\tthis.renderPagination();\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.view = [];\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.checkBodyScroll();\n\n\t\t\t\t\t\t// Stop processing visual.\n\t\t\t\t\t\tthis.status.processingData = false;\n\t\t\t\t\t}, 80 );\n\t\t\t\t},\n\n\t\t\t\t// Render all the data passed to JD-Table.\n\t\t\t\trenderViewAll : function ()\n\t\t\t\t{\n\t\t\t\t\tlet fullView = [];\n\n\t\t\t\t\tif ( this.processedDataSize > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.processedData.forEach ( ( row, index ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfullView.push\n\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\tindex : index,\n\t\t\t\t\t\t\t\tdata  : row\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.view = fullView;\n\t\t\t\t},\n\n\t\t\t\t// Renders the virtual view based on the passed position.\n\t\t\t\trenderViewVirtual : function ( renderPosition )\n\t\t\t\t{\n\t\t\t\t\t// Calculate how many rows will fit in the current view (client table body).\n\t\t\t\t\tconst VIRTUAL_ROWS_IN_VIEW = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Get the current height of the table body container.\n\t\t\t\t\t\tlet viewHeight = this.$refs.bodyData.clientHeight;\n\n\t\t\t\t\t\treturn Math.ceil( viewHeight / this.setting.rowHeight );\n\t\t\t\t\t};\n\n\t\t\t\t\t// Calculate the virtual render buffer size. This # of items will be loaded before and after the view.\n\t\t\t\t\tconst VIRTUAL_BUFFER_SIZE = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Set the buffer size to 5 times the amount of rows that fit in the view.\n\t\t\t\t\t\treturn VIRTUAL_ROWS_IN_VIEW() * 5;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Determines if the renderPosition is near the start of the list.\n\t\t\t\t\tconst VIRTUAL_START_ZONE = ( position ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\treturn ( position <= VIRTUAL_BUFFER_SIZE() );\n\t\t\t\t\t};\n\n\t\t\t\t\t// Determines if the renderPosition is near the end of the list.\n\t\t\t\t\tconst VIRTUAL_END_ZONE = ( position ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\treturn ( position >= ( this.processedDataSize - 1) || position >= (this.processedDataSize - VIRTUAL_BUFFER_SIZE() ) );\n\t\t\t\t\t};\n\n\t\t\t\t\tlet updatedView = [];\n\n\t\t\t\t\t// Set the virtual height div.\n\t\t\t\t\tthis.rendering.virtualHeight = 0;\n\n\t\t\t\t\tif ( this.processedDataSize > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Update the virtual height div.\n\t\t\t\t\t\tthis.rendering.virtualHeight = this.processedDataSize * this.setting.rowHeight;\n\n\t\t\t\t\t\tlet startPosition = renderPosition - VIRTUAL_BUFFER_SIZE();\n\t\t\t\t\t\tlet endPosition   = renderPosition + VIRTUAL_BUFFER_SIZE() + VIRTUAL_ROWS_IN_VIEW();\n\n\t\t\t\t\t\t// If the render position is in the start zone, set to 0 (beginning) of data.\n\t\t\t\t\t\tif ( VIRTUAL_START_ZONE( startPosition ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstartPosition = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If the render position is in the end zone, set to the last data item (end).\n\t\t\t\t\t\tif ( VIRTUAL_END_ZONE( endPosition ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tendPosition = this.processedDataSize - 1;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let i = startPosition; i <= endPosition; i++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Add item to end of view.\n\t\t\t\t\t\t\tupdatedView.push\n\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\tindex : i,\n\t\t\t\t\t\t\t\tdata  : this.processedData[i]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Update the currently rendered top row (index).\n\t\t\t\t\t\tthis.rendering.rowTopIndex = startPosition;\n\n\t\t\t\t\t\t// Update the currently rendered bottom row (index).\n\t\t\t\t\t\tthis.rendering.rowBottomIndex = endPosition;\n\n\t\t\t\t\t\t// Update the currently rendered position.\n\t\t\t\t\t\tthis.rendering.rowMiddleIndex = renderPosition;\n\n\t\t\t\t\t\t// Set the next render positions (top/bottom).\n\t\t\t\t\t\tthis.setRenderPositions();\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.view = updatedView;\n\t\t\t\t},\n\n\t\t\t\trenderPagination : function ()\n\t\t\t\t{\n\t\t\t\t\t// Sets the available pages based on the data size and rows per page.\n\t\t\t\t\tconst SET_AVAILABLE_PAGES = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.rendering.pagination.availablePages = Math.ceil( this.processedDataSize / this.rendering.pagination.currentPageRows );\n\n\t\t\t\t\t\tif ( this.rendering.pagination.currentPage > this.rendering.pagination.availablePages )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.pagination.currentPage = 1;\n\t\t\t\t\t\t}\n\t\t\t\t\t};\n\n\t\t\t\t\t// Returns the rows that should be in the current view based ont he page.\n\t\t\t\t\tconst GET_ROWS_IN_PAGE = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet pageView   = [];\n\t\t\t\t\t\tlet startIndex = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows ) - this.rendering.pagination.currentPageRows;\n\t\t\t\t\t\tlet endIndex   = ( this.rendering.pagination.currentPage * this.rendering.pagination.currentPageRows );\n\n\t\t\t\t\t\t// End index correction.\n\t\t\t\t\t\tif ( endIndex > this.processedDataSize )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tendIndex = this.processedDataSize;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tfor ( let i = startIndex; i < endIndex; i++ )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Add item to end of view.\n\t\t\t\t\t\t\tpageView.push\n\t\t\t\t\t\t\t({\n\t\t\t\t\t\t\t\tindex : i,\n\t\t\t\t\t\t\t\tdata  : this.processedData[i]\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( pageView.length > 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.pagination.currentStartIndex = startIndex;\n\t\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex   = endIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.pagination.currentStartIndex = 0;\n\t\t\t\t\t\t\tthis.rendering.pagination.currentEndIndex   = 0;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\treturn pageView;\n\t\t\t\t\t};\n\n\t\t\t\t\t// Sets the left and right page options for the footer.\n\t\t\t\t\tconst SET_PAGE_OPTIONS = () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tlet leftPages       = [];\n\t\t\t\t\t\tlet rightPages      = [];\n\t\t\t\t\t\tlet sideQuantity    = this.setting.pageSideQuantity;\n\n\t\t\t\t\t\t// Correct the side quantity if there aren't enough pages to fulfill it.\n\t\t\t\t\t\tif ( ( sideQuantity * 2 ) > this.rendering.pagination.availablePages )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsideQuantity = Math.ceil( this.rendering.pagination.availablePages / 2 );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If at the beginning of the page last.\n\t\t\t\t\t\tif ( this.rendering.pagination.currentPage <= sideQuantity )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfor ( let i = 1; i <= sideQuantity; i++ )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tleftPages.push( i );\n\t\t\t\t\t\t\t\trightPages.push( i + sideQuantity );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// If the available pages is a odd number, remove the last rightPage option (extra).\n\t\t\t\t\t\t\tif ( this.rendering.pagination.availablePages % 2 !== 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\trightPages.pop();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// If at the end of the page last.\n\t\t\t\t\t\t\tif ( this.rendering.pagination.currentPage >= ( this.rendering.pagination.availablePages - sideQuantity ) )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet tempTotalPages = this.rendering.pagination.availablePages;\n\n\t\t\t\t\t\t\t\t// Correction for condition when there are not enough pages to balance on left and right.\n\t\t\t\t\t\t\t\t// This will ensure the left side gets filled first.\n\t\t\t\t\t\t\t\tlet rightSideQuantity = tempTotalPages - sideQuantity;\n\n\t\t\t\t\t\t\t\tif ( rightSideQuantity > sideQuantity )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\trightSideQuantity = sideQuantity;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor ( let i = 1; i <= rightSideQuantity; i++ )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\trightPages.push( tempTotalPages );\n\n\t\t\t\t\t\t\t\t\ttempTotalPages--;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tfor ( let i = 1; ( i <= sideQuantity && tempTotalPages !== 0 ); i++ )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tleftPages.push( tempTotalPages );\n\n\t\t\t\t\t\t\t\t\ttempTotalPages--;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse the sort order.\n\t\t\t\t\t\t\t\tleftPages.reverse();\n\t\t\t\t\t\t\t\trightPages.reverse();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet tempCurrentPage = this.rendering.pagination.currentPage;\n\n\t\t\t\t\t\t\t\t// Set left side.\n\t\t\t\t\t\t\t\tfor ( let i = 1; i <= sideQuantity; i++ )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tleftPages.push( tempCurrentPage );\n\n\t\t\t\t\t\t\t\t\ttempCurrentPage--;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\ttempCurrentPage = this.rendering.pagination.currentPage + 1;\n\n\t\t\t\t\t\t\t\t// Set right side.\n\t\t\t\t\t\t\t\tfor ( let i = 1; i <= sideQuantity; i++ )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\trightPages.push( tempCurrentPage );\n\n\t\t\t\t\t\t\t\t\ttempCurrentPage++;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Reverse the sort order.\n\t\t\t\t\t\t\t\tleftPages.reverse();\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.rendering.pagination.leftPages             = leftPages;\n\t\t\t\t\t\tthis.rendering.pagination.rightPages            = rightPages;\n\t\t\t\t\t\tthis.rendering.pagination.currentPageHightlight = this.rendering.pagination.currentPage;\n\t\t\t\t\t};\n\n\t\t\t\t\tSET_AVAILABLE_PAGES();\n\t\t\t\t\tSET_PAGE_OPTIONS();\n\n\t\t\t\t\t// Reset the scroll position.\n\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\t// Update the table view.\n\t\t\t\t\tthis.view = GET_ROWS_IN_PAGE();\n\t\t\t\t},\n\n\t\t\t\t// Changes the page to the passed value.\n\t\t\t\tpaginationChange : function ( page )\n\t\t\t\t{\n\t\t\t\t\tif ( this.rendering.pagination.currentPage !== page )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Increase the page.\n\t\t\t\t\t\tthis.rendering.pagination.currentPage = page;\n\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Checks and processes the next page of paginated data.\n\t\t\t\tpaginationNext : function ()\n\t\t\t\t{\n\t\t\t\t\tlet nextPage = this.rendering.pagination.currentPage + 1;\n\n\t\t\t\t\t// Ensure not going beyond available pages.\n\t\t\t\t\tif ( nextPage <= this.rendering.pagination.availablePages )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Increase the page.\n\t\t\t\t\t\tthis.rendering.pagination.currentPage++;\n\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Sends the current page of the paginated data to the last page.\n\t\t\t\tpaginationLast : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.rendering.pagination.currentPage !== this.rendering.pagination.availablePages )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Set the current page to the last.\n\t\t\t\t\t\tthis.rendering.pagination.currentPage = this.rendering.pagination.availablePages;\n\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Checks and processes the previous page of paginated data.\n\t\t\t\tpaginationPrevious : function ()\n\t\t\t\t{\n\t\t\t\t\tlet previousPage = this.rendering.pagination.currentPage - 1;\n\n\t\t\t\t\t// Ensure not going beyond available pages.\n\t\t\t\t\tif ( previousPage >= 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Increase the page.\n\t\t\t\t\t\tthis.rendering.pagination.currentPage--;\n\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Sends the current page of the paginated data to the first page.\n\t\t\t\tpaginationFirst : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.rendering.pagination.currentPage !== 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Set the current page to the last.\n\t\t\t\t\t\tthis.rendering.pagination.currentPage = 1;\n\n\t\t\t\t\t\t// Re-render the view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Changes how many rows can appear per page.\n\t\t\t\tchangePageRows : function ( rows )\n\t\t\t\t{\n\t\t\t\t\tif ( this.rendering.pagination.currentSelectedPageRowOption !== rows )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( rows === 'All' )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.pagination.currentPageRows = this.processedDataSize;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.pagination.currentPageRows = rows;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tthis.rendering.pagination.currentSelectedPageRowOption = rows;\n\n\t\t\t\t\t\tthis.rendering.pagination.changingRows = false;\n\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Sets the next top and bottom re-rendering position points in pixels.\n\t\t\t\tsetRenderPositions : function ()\n\t\t\t\t{\n\t\t\t\t\t// For a re-render.\n\t\t\t\t\tthis.$forceUpdate();\n\n\t\t\t\t\t// We use nextTick() so that the height calculations are performed after the render is complete.\n\t\t\t\t\tthis.$nextTick( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Returns the height of the current rendered view (all items).\n\t\t\t\t\t\tconst CURRENT_VIEW_HEIGHT = () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.$refs.viewData.clientHeight;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Returns the current position (top) of the view inside the body.\n\t\t\t\t\t\tconst CURRENT_VIEW_POSITION_PX = () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.$refs.viewData.offsetTop;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Returns the current height of the table body.\n\t\t\t\t\t\tconst CURRENT_BODY_HEIGHT = () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn this.$refs.bodyData.clientHeight;\n\t\t\t\t\t\t};\n\n\t\t\t\t\t\t// Calculate the next render (top) position.\n\t\t\t\t\t\tif ( this.rendering.rowTopIndex === 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.triggerTopPositionPX = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Re-render when the scroll bar is at a position where only 5 rows exist above.\n\t\t\t\t\t\t\tthis.rendering.triggerTopPositionPX = Math.floor( CURRENT_VIEW_POSITION_PX() + ( CURRENT_VIEW_HEIGHT() / 8 ) );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Calculate the next render (bottom) position.\n\t\t\t\t\t\tif ( this.rendering.rowBottomIndex === ( this.processedDataSize - 1 ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.rendering.triggerBottomPositionPX = -1;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Re-render when scroll bar is at a position where only 2 pages of rows exist.\n\t\t\t\t\t\t\tthis.rendering.triggerBottomPositionPX = Math.floor ( ( CURRENT_VIEW_POSITION_PX() + CURRENT_VIEW_HEIGHT() ) - ( CURRENT_BODY_HEIGHT() * 2.0 ) );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t// Used for virtual rendering, renders the view when scrolling at top/bottom trigger points.\n\t\t\t\tvirtualScroll : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.rendering.engine !== 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !this.rendering.resettingScroll )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clear the scrolling timer.\n\t\t\t\t\t\tclearTimeout( this.rendering.isScrolling );\n\n\t\t\t\t\t\t// Get the current scroll position.\n\t\t\t\t\t\tlet scrollPositionPX = this.$refs.bodyData.scrollTop;\n\n\t\t\t\t\t\t// Calculate the % (0 - 100) the scroll position is.\n\t\t\t\t\t\tlet scrollPositionPercent = scrollPositionPX / this.rendering.virtualHeight;\n\n\t\t\t\t\t\t// Calculate the next potential render position in the data.\n\t\t\t\t\t\tlet potentialRenderPosition = Math.floor( this.processedDataSize * scrollPositionPercent );\n\n\t\t\t\t\t\t// Scrolling Up Check\n\t\t\t\t\t\tif ( scrollPositionPX < this.rendering.triggerTopPositionPX )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( this.rendering.triggerTopPositionPX >= 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Show the processing message.\n\t\t\t\t\t\t\t\tthis.status.processingData = true;\n\n\t\t\t\t\t\t\t\tthis.rendering.isScrolling = setTimeout( () =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.renderView( Math.floor( this.processedDataSize * scrollPositionPercent ) );\n\t\t\t\t\t\t\t\t}, 500 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Scrolling Down Check.\n\t\t\t\t\t\tif ( scrollPositionPX > this.rendering.triggerBottomPositionPX )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( this.rendering.triggerBottomPositionPX >= 0 )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Show the processing message.\n\t\t\t\t\t\t\t\tthis.status.processingData = true;\n\n\t\t\t\t\t\t\t\tthis.rendering.isScrolling = setTimeout( () =>\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\tthis.renderView( Math.floor( this.processedDataSize * scrollPositionPercent ) );\n\t\t\t\t\t\t\t\t}, 750 );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Checks the width of the JD-Table and sets the mobile size flag.\n\t\t\t\tcheckMobile : function ()\n\t\t\t\t{\n\t\t\t\t\tsetTimeout( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.$refs.bodyData.clientWidth <= 320)\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.mobileSize = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.mobileSize = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 220);\n\t\t\t\t},\n\n\t\t\t\t// Sets the column that is currently being hovered over.\n\t\t\t\tcellHover : function ( columnIndex )\n\t\t\t\t{\n\t\t\t\t\tthis.columns.activeHover = columnIndex;\n\t\t\t\t},\n\n\t\t\t\t// Checks if the body of the table has a scroll bar. This is important to align the head + body.\n\t\t\t\tcheckBodyScroll : function ()\n\t\t\t\t{\n\t\t\t\t\tsetTimeout( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Checks the table widths to see if scroll bar is enabled for body.\n\t\t\t\t\t\tif ( this.$refs.bodyData.scrollHeight > this.$refs.bodyData.clientHeight )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.tableScroll = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.status.tableScroll = false;\n\t\t\t\t\t\t}\n\t\t\t\t\t}, 100);\n\t\t\t\t},\n\n\t\t\t\t// Resets clears the current hovered column/row data.\n\t\t\t\tbodyLeave : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.rendering.engine !== 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tthis.columns.activeHover = null;\n\t\t\t\t},\n\n\t\t\t\t// Triggers the start of a resize event. Records the column to be resized and the starting X position.\n\t\t\t\tresizeStart : function ( columnIndex, e )\n\t\t\t\t{\n\t\t\t\t\t// Start a listener to stop the resize process.\n\t\t\t\t\twindow.addEventListener( 'mouseup', this.resizeStop , false );\n\n\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.columns.activeResize  = columnIndex;\n\t\t\t\t\t\tthis.columns.activeResizeStart = e.clientX;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\n\t\t\t\t// Ends the column resize process.\n\t\t\t\tresizeStop : function ()\n\t\t\t\t{\n\t\t\t\t\t// Small delay to help with sort issue.\n\t\t\t\t\tsetTimeout( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.columns.activeResize = null;\n\t\t\t\t\t}, 75 );\n\n\t\t\t\t\tthis.renderViewVirtual( this.rendering.rowMiddleIndex );\n\n\t\t\t\t\twindow.removeEventListener( 'mouseup', this.resizeStop, false );\n\t\t\t\t},\n\n\t\t\t\t// Resets the scroll position to the top left of the table body.\n\t\t\t\tresetScroll : function ()\n\t\t\t\t{\n\t\t\t\t\t// This prevents the triggering of the onScroll function for body.\n\t\t\t\t\tthis.rendering.resettingScroll = true;\n\n\t\t\t\t\t// Reset the scroll position to top/left.\n\t\t\t\t\tthis.$refs.bodyData.scrollTop      = 0;\n\t\t\t\t\tthis.$refs.contentFrame.scrollLeft = 0;\n\n\t\t\t\t\tthis.$nextTick().then( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// This prevents the triggering of the onScroll function for body.\n\t\t\t\t\t\tthis.rendering.resettingScroll = false;\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t// Resizes the flagged column according to the clientX position.\n\t\t\t\tresizeDrag : function ( columnIndex, e )\n\t\t\t\t{\n\t\t\t\t\tif ( !this.setting.responsiveTable && this.columns.activeResize !== null )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Extract the width number from the string.\n\t\t\t\t\t\tlet width = this.columns.list[columnIndex].width;\n\n\t\t\t\t\t\t// Shrink the width.\n\t\t\t\t\t\tif ( e.clientX < this.columns.activeResizeStart )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Calculate new width based off the existing width and start drag position and current client X.\n\t\t\t\t\t\t\twidth = width - ( this.columns.activeResizeStart - e.clientX );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Expand the width.\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Calculate new width based off the existing width and start drag position and current client X.\n\t\t\t\t\t\t\twidth = width + ( e.clientX - this.columns.activeResizeStart );\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// If resizeForceMinWidth is enabled and the width is lower then start - reset width.\n\t\t\t\t\t\tif ( this.setting.resizeForceMinWidth && ( width < this.setting.columns[columnIndex].width ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\twidth = this.setting.columns[columnIndex].width;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Update the column width.\n\t\t\t\t\t\tthis.columns.list[columnIndex].width                   = width;\n\t\t\t\t\t\tthis.columns.list[columnIndex].headerStyles['width']   = width + 'px';\n\t\t\t\t\t\tthis.columns.list[columnIndex].dataStyles['width']     = width + 'px';\n\t\t\t\t\t\tthis.columns.list[columnIndex].dataStyles['min-width'] = width + 'px';\n\n\t\t\t\t\t\t// Update the initial drag position.\n\t\t\t\t\t\tthis.columns.activeResizeStart = e.clientX;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Changes the sort column and/or direction.\n\t\t\t\tchangeSort : function ( columnIndex )\n\t\t\t\t{\n\t\t\t\t\t// Prevent sort on resize.\n\t\t\t\t\tif ( this.columns.activeResize !== null )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !this.setting.columnSort )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If the clicked column is the currently sorted column, reverse the sort.\n\t\t\t\t\tif ( this.columns.activeSortIndex === columnIndex )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.columns.activeSortAsc = !this.columns.activeSortAsc;\n\t\t\t\t\t}\n\t\t\t\t\t// Sort the new column descending.\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.columns.activeSortIndex     = columnIndex;\n\t\t\t\t\t\tthis.columns.activeSortAsc = false;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Re-render the view.\n\t\t\t\t\tthis.renderView( this.rendering.rowMiddleIndex );\n\t\t\t\t},\n\n\t\t\t\t// Sorts the original data.\n\t\t\t\tsortData : function ()\n\t\t\t\t{\n\t\t\t\t\tlet columnName     = this.columns.list[this.columns.activeSortIndex].name;\n\t\t\t\t\tlet columnSortType = this.columns.list[this.columns.activeSortIndex].type;\n\n\t\t\t\t\tif ( this.processedDataSize > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.processedData.sort( ( a, b ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Sort the data with null values.\n\t\t\t\t\t\t\tconst sortByNull = ( x, y ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tif ( !x[columnName] )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( !y[columnName] )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn 1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// Sort the data by string.\n\t\t\t\t\t\t\tconst sortByString = ( x, y ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet stringX = x[columnName].toUpperCase();\n\t\t\t\t\t\t\t\tlet stringY = y[columnName].toUpperCase();\n\n\t\t\t\t\t\t\t\tif ( stringX < stringY )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn -1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( stringX > stringY )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn 1 * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Strings are the same.\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Sort the data by number.\n\t\t\t\t\t\t\tconst sortByNumber = ( x, y ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn ( x[columnName] - y[columnName] ) * ( ( !this.columns.activeSortAsc ) ? -1 : 1 );\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Sort the data by array. Sorts the first string in the array.\n\t\t\t\t\t\t\tconst sortByArray = ( x, y ) =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tlet stringX = x[columnName][0].toUpperCase();\n\t\t\t\t\t\t\t\tlet stringY = y[columnName][0].toUpperCase();\n\n\t\t\t\t\t\t\t\tif ( stringX < stringY )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn -1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\tif ( stringX > stringY )\n\t\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t\treturn 1;\n\t\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t\t// Strings are the same.\n\t\t\t\t\t\t\t\treturn 0;\n\t\t\t\t\t\t\t};\n\n\t\t\t\t\t\t\t// Check for nulls.\n\t\t\t\t\t\t\tif ( !a[columnName] || !b[columnName] )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn sortByNull ( a, b );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// If the column is a string, sort using string function.\n\t\t\t\t\t\t\tif ( columnSortType === 'String' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn sortByString ( a, b );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// If the column is a Number, sort using Number function.\n\t\t\t\t\t\t\tif ( columnSortType === 'Number' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn sortByNumber ( a, b );\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t\t// If the column is a Array, sort using Array function.\n\t\t\t\t\t\t\tif ( columnSortType === 'Array' )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\treturn sortByArray ( a, b );\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Returns the appropriate sort title.\n\t\t\t\tsortTitle : function ( columnIndex )\n\t\t\t\t{\n\t\t\t\t\tif ( !this.setting.columnSort )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.columns.activeSortIndex === columnIndex && !this.columns.activeSortAsc )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'Sort Ascending'\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 'Sort Descending';\n\t\t\t\t},\n\n\t\t\t\t// Changes the selected filter dropdown focus.\n\t\t\t\tfilterDropdown : function ( columnIndex )\n\t\t\t\t{\n\t\t\t\t\tif ( this.filters.activeDropdown === columnIndex )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clear the selected filter dropdown.\n\t\t\t\t\t\tthis.filters.activeDropdown = null;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Create a mouse event listener to close the dropdown.\n\t\t\t\t\t\twindow.addEventListener( 'mouseup', this.clearFilterDropdown, false );\n\n\t\t\t\t\t\t// Show the dropdown menu.\n\t\t\t\t\t\tif ( this.filters.beingBuilt.column === null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.filters.activeDropdown = 0;\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.filters.activeDropdown = columnIndex;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Clears the dropdown as well as the window listener.\n\t\t\t\tclearFilterDropdown : function ()\n\t\t\t\t{\n\t\t\t\t\t// Clear the selected filter dropdown.\n\t\t\t\t\tthis.filters.activeDropdown = null;\n\n\t\t\t\t\t// Remove the listener.\n\t\t\t\t\twindow.removeEventListener( 'mouseup', this.clearFilterDropdown, false );\n\t\t\t\t},\n\n\t\t\t\t// Helps build a filter to be applied to the table. Executed when filter dropdown item is clicked.\n\t\t\t\tbuildFilter : function ( itemIndex, item )\n\t\t\t\t{\n\t\t\t\t\t// Reset any error that may exist.\n\t\t\t\t\tthis.filters.error     = false;\n\t\t\t\t\tthis.filters.errorText = '';\n\n\t\t\t\t\t// Column selection.\n\t\t\t\t\tif ( itemIndex === 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.beingBuilt.column = this.filterableColumns[item];\n\n\t\t\t\t\t\tif ( this.filters.beingBuilt.option === null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tsetTimeout( () =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Activate the next tab.\n\t\t\t\t\t\t\t\tthis.filters.activeDropdown = 1;\n\n\t\t\t\t\t\t\t\t// Create a mouse event listener to close the dropdown.\n\t\t\t\t\t\t\t\twindow.addEventListener( 'mouseup', this.clearFilterDropdown, false );\n\t\t\t\t\t\t\t}, 50);\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Option selection.\n\t\t\t\t\tif ( itemIndex === 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.beingBuilt.option = item;\n\n\t\t\t\t\t\tif ( this.filters.beingBuilt.value === null )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.$refs.filterInput.focus();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Adds the built filter to be applied to the table.\n\t\t\t\taddFilter : function ()\n\t\t\t\t{\n\t\t\t\t\t// Manage column error.\n\t\t\t\t\tif ( this.filters.beingBuilt.column === null || typeof( this.filters.beingBuilt.column ) !== 'object' )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.errorText = 'A column must be selected to add a filter.';\n\t\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// Manage option error.\n\t\t\t\t\tif ( this.filters.beingBuilt.option === null || typeof( this.filters.beingBuilt.option ) !== 'string' )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.errorText = 'A filter type must be selected to add a filter.';\n\t\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.filters.beingBuilt.option == 'Greater/Equal To' && isNaN( this.filters.beingBuilt.value ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.filters.errorText = 'Value must be a number.';\n\t\t\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\tif ( this.filters.beingBuilt.option == 'Less/Equal To' && isNaN( this.filters.beingBuilt.value ) )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.filters.errorText = 'Value must be a number.';\n\t\t\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\t// Manage value error.\n\t\t\t\t\tif ( this.filters.beingBuilt.value === null || typeof( this.filters.beingBuilt.value ) !== 'string' )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.filters.errorText = 'A filter value must be entered to add a filter.';\n\t\t\t\t\t\tthis.filters.error = true;\n\t\t\t\t\t}\n\n\t\t\t\t\t// If there are no errors, continue.\n\t\t\t\t\tif ( !this.filters.error )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Create a copy of the filter.\n\t\t\t\t\t\tlet filter =\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tcolumn : this.filters.beingBuilt.column,\n\t\t\t\t\t\t\t\toption : this.filters.beingBuilt.option,\n\t\t\t\t\t\t\t\tvalue  : this.filters.beingBuilt.value\n\t\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Add the filter.\n\t\t\t\t\t\tthis.filters.active.push( filter );\n\n\t\t\t\t\t\t// Clear being built.\n\t\t\t\t\t\tthis.filters.beingBuilt.column = null;\n\t\t\t\t\t\tthis.filters.beingBuilt.option = null;\n\t\t\t\t\t\tthis.filters.beingBuilt.value  = null;\n\n\t\t\t\t\t\t// Reset the render positions.\n\t\t\t\t\t\tthis.rendering.triggerTopPositionPX    = null;\n\t\t\t\t\t\tthis.rendering.triggerBottomPositionPX = null;\n\n\t\t\t\t\t\t// Reset the scroll position to top/left.\n\t\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Render the new view.\n\t\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t\t});\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Removes a filter from the active list.\n\t\t\t\tremoveFilter : function ( index )\n\t\t\t\t{\n\t\t\t\t\t// Reset any error that may exist.\n\t\t\t\t\tthis.filters.error     = false;\n\t\t\t\t\tthis.filters.errorText = '';\n\n\t\t\t\t\tthis.filters.active.splice( index, 1 );\n\n\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Render the new view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t})\n\t\t\t\t},\n\n\t\t\t\t// Clears all active filters and being built.\n\t\t\t\tclearAllFilters : function () {\n\t\t\t\t\t// Clear being built.\n\t\t\t\t\tthis.filters.beingBuilt.column = null;\n\t\t\t\t\tthis.filters.beingBuilt.option = null;\n\t\t\t\t\tthis.filters.beingBuilt.value = null;\n\n\t\t\t\t\t// Reset any error that may exist.\n\t\t\t\t\tthis.filters.error     = false;\n\t\t\t\t\tthis.filters.errorText = '';\n\n\t\t\t\t\t// Clear active.\n\t\t\t\t\tthis.filters.active = [];\n\n\t\t\t\t\t// Process the data through filters/search.\n\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\t// Render the new view.\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t})\n\t\t\t\t},\n\n\t\t\t\t// Changes the column visibility.\n\t\t\t\tcolumnSelection : function ( selectedColumn )\n\t\t\t\t{\n\t\t\t\t\t// If disabling, enforce at least 1 enabled.\n\t\t\t\t\tif ( selectedColumn.enabled )\n\t\t\t\t\t{\n\t\t\t\t\t\tlet enabledCount = 0;\n\n\t\t\t\t\t\t// Check how many are enabled.\n\t\t\t\t\t\tthis.columns.list.forEach( ( column ) =>\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( column.enabled )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tenabledCount++;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t});\n\n\t\t\t\t\t\t// Must have at least 1 enabled to disable.\n\t\t\t\t\t\tif ( enabledCount > 1 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tselectedColumn.enabled      = false;\n\t\t\t\t\t\t\tthis.columns.selectionError = false;\n\n\t\t\t\t\t\t\t// Check mobile size.\n\t\t\t\t\t\t\tthis.checkMobile();\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.columns.selectionError = true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.columns.selectionError = false;\n\t\t\t\t\t\tselectedColumn.enabled      = true;\n\n\t\t\t\t\t\t// Check mobile size.\n\t\t\t\t\t\tthis.checkMobile();\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Performs the search action.\n\t\t\t\tperformSearch : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( !this.search.text )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.search.searching )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.clearSearch();\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\t// Emit search event.\n\t\t\t\t\t\tif ( this.setting.searchEngine === 1 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.search.searching      = true;\n\t\t\t\t\t\t\tthis.status.processingData = true;\n\n\t\t\t\t\t\t\tthis.$emit('search', this.search.text );\n\t\t\t\t\t\t}\n\t\t\t\t\t\t// Perform search using JD-Table.\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t\t\t});\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Clears the search.\n\t\t\t\tclearSearch : function ()\n\t\t\t\t{\n\t\t\t\t\tthis.search.text      = '';\n\t\t\t\t\tthis.search.searching = false;\n\n\t\t\t\t\tthis.resetScroll();\n\n\t\t\t\t\tthis.processData().then( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.renderView();\n\t\t\t\t\t});\n\t\t\t\t},\n\n\t\t\t\t// Called when user clicks on a data row. Accepts the index of the data on the this.data.\n\t\t\t\trowAction : function ( rowIndex )\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.quickView )\n\t\t\t\t\t{\n\t\t\t\t\t\t// Clean up other potential menus.\n\t\t\t\t\t\tthis.columns.selecting = false;\n\t\t\t\t\t\tthis.filters.error     = false;\n\t\t\t\t\t\tthis.filters.errorText = '';\n\t\t\t\t\t\tthis.filters.show      = false;\n\n\t\t\t\t\t\t// Show the quick view.\n\t\t\t\t\t\tthis.row.selectedIndex = rowIndex;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Called when the NEXT button is pressed on the quick view.\n\t\t\t\tquickViewNext : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.row.selectedIndex < ( this.processedData.length - 1 ) )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.row.selectedIndex++;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Called when the PREVIOUS button is pressed on the quick view.\n\t\t\t\tquickViewPrevious : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.row.selectedIndex >= 1 )\n\t\t\t\t\t{\n\t\t\t\t\t\tthis.row.selectedIndex--;\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Prints the element.\n\t\t\t\tprint : function ( elementRef )\n\t\t\t\t{\n\t\t\t\t\tlet contentToPrinter = this.$refs[elementRef].innerHTML;\n\t\t\t\t\tlet styles           = \"<style>.contentRow { display : flex; flex-direction : column; width : 100%; } .rowTitle { display : flex; align-items : center; font-size : 1rem; font-weight : 600; word-break : break-all; padding : 0.5rem 1rem; } .rowData { display : flex; align-items : center;padding : 0.2rem 1rem; word-break : break-all; }</style>\";\n\t\t\t\t\tlet printWindow      = window.open( '', 'Print', 'height=600, width=800');\n\n\t\t\t\t\tprintWindow.document.write('<html><head><title>Print</title>');\n\t\t\t\t\tprintWindow.document.write(styles);\n\t\t\t\t\tprintWindow.document.write('</head><body >');\n\t\t\t\t\tprintWindow.document.write(contentToPrinter);\n\t\t\t\t\tprintWindow.document.write('</body></html>');\n\n\t\t\t\t\tprintWindow.document.close();\n\t\t\t\t\tprintWindow.focus()\n\t\t\t\t\tprintWindow.print();\n\t\t\t\t\tprintWindow.close();\n\t\t\t\t}\n\t\t\t},\n\n\t\tcomputed :\n\t\t\t{\n\t\t\t\t// View flag. Enabled if the view has data. False if not.\n\t\t\t\tisViewAvailable : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.view.length > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\n\t\t\t\t// Normalizes the initialize settings in case one or more properties are not configured.\n\t\t\t\tsetting : function ()\n\t\t\t\t{\n\t\t\t\t\treturn Object.assign (\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// Column Data\n\t\t\t\t\t\t\tcolumns             : [],\n\n\t\t\t\t\t\t\t// Features\n\t\t\t\t\t\t\tstartBySearch                : false,\n\t\t\t\t\t\t\tstartBySearchMessage         : null,\n\t\t\t\t\t\t\tstartBySearchArrowSearch     : false,\n\t\t\t\t\t\t\tstartBySearchArrowFilter     : false,\n\t\t\t\t\t\t\tstartBySearchArrowSearchText : 'Search Here',\n\t\t\t\t\t\t\tstartBySearchArrowFilterText : 'Filter by Column',\n\t\t\t\t\t\t\tmaxMinimize                  : true,\n\t\t\t\t\t\t\trefresh                      : true,\n\t\t\t\t\t\t\tsearch                       : true,\n\t\t\t\t\t\t\tcolumnSelect                 : true,\n\t\t\t\t\t\t\tresize                       : true,\n\t\t\t\t\t\t\tfilter                       : true,\n\t\t\t\t\t\t\texport                       : true,\n\t\t\t\t\t\t\tcolumnSort                   : true,\n\t\t\t\t\t\t\tquickView\t\t\t         : true,\n\n\t\t\t\t\t\t\t// Rendering\n\t\t\t\t\t\t\trenderEngine          : 2,\n\t\t\t\t\t\t\tresponsiveFrame       : true,\n\t\t\t\t\t\t\tresponsiveTable       : true,\n\t\t\t\t\t\t\tvirtualEngineRowStart : 250,\n\t\t\t\t\t\t\tframeWidth            : null,\n\t\t\t\t\t\t\theaderHeight          : 40,\n\t\t\t\t\t\t\tdataHeight            : null,\n\t\t\t\t\t\t\trowHeight             : 42,\n\t\t\t\t\t\t\tpaginationRowLimits   : [50, 750, 100],\n\t\t\t\t\t\t\tpaginationRowStart    : 50,\n\t\t\t\t\t\t\tpaginationRowAll      : true,\n\t\t\t\t\t\t\tpageSideQuantity      : 5,\n\n\t\t\t\t\t\t\t// Search\n\t\t\t\t\t\t\tsearchEngine        : 0,\n\t\t\t\t\t\t\tforceSearchOpen     : false,\n\t\t\t\t\t\t\tsearchPlaceHolder   : null,\n\n\t\t\t\t\t\t\t// Settings\n\t\t\t\t\t\t\tstartMaximized      : false,\n\t\t\t\t\t\t\tforceMaximized      : false,\n\t\t\t\t\t\t\trowZebra            : true,\n\t\t\t\t\t\t\trowFlex             : true,\n\t\t\t\t\t\t\tresizeForceMinWidth : true,\n\n\t\t\t\t\t\t\t//Layers\n\t\t\t\t\t\t\thighlight           : true,\n\t\t\t\t\t\t\tcontrols            : true,\n\t\t\t\t\t\t\tfooter              : true,\n\n\t\t\t\t\t\t\ttitle               : null\n\t\t\t\t\t\t}, this.option\n\t\t\t\t\t);\n\t\t\t\t},\n\n\t\t\t\t// Returns the total number of rows in the data.\n\t\t\t\tprocessedDataSize : function ()\n\t\t\t\t{\n\t\t\t\t\treturn this.processedData.length;\n\t\t\t\t},\n\n\t\t\t\t// Returns true if there are active filters.\n\t\t\t\tfiltering : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.filters.active.length > 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\n\t\t\t\t// Returns TRUE or FALSE based on if resize should be enabled.\n\t\t\t\tresizable : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( !this.setting.responsiveTable && this.setting.resize )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn true;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t},\n\n\t\t\t\t// Apply class to JD-Table frame based on settings.\n\t\t\t\tframeClasses : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'maximized';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( !this.setting.dataHeight )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'fullBody';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\n\t\t\t\t// Apply class to JD-Table frame based on settings.\n\t\t\t\tframeStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tif ( !this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( !this.setting.responsiveFrame )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( this.setting.frameWidth !== null )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstyles['width']     = this.setting.frameWidth + 'px';\n\t\t\t\t\t\t\t\tstyles['min-width'] = this.setting.frameWidth + 'px';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tstyles['width'] ='100%';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\n\t\t\t\t\t\t// Ensures the frame does get larger then the sum of all the column width's in PX.\n\t\t\t\t\t\tif ( this.setting.responsiveFrame && !this.setting.responsiveTable )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Apply class to controlSearch based on settings.\n\t\t\t\tcontrolSearchClasses : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.feature.searching )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'searching';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\n\t\t\t\t// Apply class to controlFilter based on settings.\n\t\t\t\tcontrolFilterClasses : function ()\n\t\t\t\t{\n\t\t\t\t\tlet classes = '';\n\n\t\t\t\t\tif ( this.filters.show )\n\t\t\t\t\t{\n\t\t\t\t\t\tclasses = 'selected';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.filtering )\n\t\t\t\t\t{\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\t// Apply class to search icon based on searching status.\n\t\t\t\tsearchIconClasses : function ()\n\t\t\t\t{\n\t\t\t\t\tlet classes = 'search';\n\n\t\t\t\t\tif ( this.setting.forceSearchOpen )\n\t\t\t\t\t{\n\t\t\t\t\t\tclasses += ' noSelect';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.feature.searching )\n\t\t\t\t\t{\n\t\t\t\t\t\tclasses += ' selected';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.search.searching )\n\t\t\t\t\t{\n\t\t\t\t\t\tclasses += ' active';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\t// Change search icon title based on searching status.\n\t\t\t\tsearchIconTitle : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.feature.searching )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'Hide Search';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 'Show Search';\n\t\t\t\t},\n\n\t\t\t\t// Apply class to controlFeature based on settings.\n\t\t\t\tcontrolFeatureClasses : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.feature.searching )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'searching';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn null;\n\t\t\t\t},\n\n\t\t\t\t// Apply class to min/maximize icon based on min/maximize status.\n\t\t\t\tminMaxIconClasses : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'fas fa-window-minimize';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 'far fa-window-maximize';\n\t\t\t\t},\n\n\t\t\t\t// Change min/maximize icon title based on min/maximize status.\n\t\t\t\tminMaxIconTitle : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'Minimize';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn 'Maximize';\n\t\t\t\t},\n\n\t\t\t\t// Apply styles to layerContent based on settings.\n\t\t\t\tlayerContentStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tif ( !this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\t// responsiveFrame = TRUE\n\t\t\t\t\t\tif ( this.setting.responsiveFrame )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t// responsiveTable = FALSE\n\t\t\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\t// Create scroll back in layerContent.\n\t\t\t\t\t\t\t\tstyles['overflow-y'] = 'auto';\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Apply styles to the content table based on settings.\n\t\t\t\ttableStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\t// responsiveTable = FALSE\n\t\t\t\t\tif ( !this.setting.responsiveTable )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['min-width'] = this.tableWidth + 'px';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Apply styles to the table head based on settings.\n\t\t\t\ttableHeadStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tstyles['height'] = this.setting.headerHeight + 'px';\n\t\t\t\t\tstyles['min-height'] = this.setting.headerHeight + 'px';\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Apply class to table head cells based on settings.\n\t\t\t\theadCellClasses : function ()\n\t\t\t\t{\n\t\t\t\t\tlet classes = '';\n\n\t\t\t\t\tif ( this.setting.columnSort )\n\t\t\t\t\t{\n\t\t\t\t\t\tclasses += ' sort';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.status.tableScroll )\n\t\t\t\t\t{\n\t\t\t\t\t\tclasses += ' scrollBuffer';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\t// Apply styles to the content table body based on settings.\n\t\t\t\ttableBodyStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tif ( !this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['height'] = this.setting.dataHeight + 'px';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Apply styles to the content table virtual body based on settings.\n\t\t\t\tbodyVirtualStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\theight : this.rendering.virtualHeight + 'px'\n\t\t\t\t\t\t};\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Apply styles to feature option zone based on settings.\n\t\t\t\toptionDropdownStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'max-height' : ( this.setting.dataHeight + this.setting.headerHeight ) + 'px'\n\t\t\t\t\t\t};\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Apply styles to the content table body data container based on settings.\n\t\t\t\tbodyViewStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles =\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\t'width': '100%'\n\t\t\t\t\t\t};\n\n\t\t\t\t\tif ( this.rendering.engine === 0 )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['position'] = 'absolute';\n\t\t\t\t\t\tstyles['top']      =( this.rendering.rowTopIndex * this.setting.rowHeight ) + 'px';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Apply class to table body row based on settings.\n\t\t\t\tviewRowClasses : function ()\n\t\t\t\t{\n\t\t\t\t\tlet classes = '';\n\n\t\t\t\t\tif ( this.setting.rowZebra )\n\t\t\t\t\t{\n\t\t\t\t\t\tclasses += ' zebra';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\t// Apply styles to the content table body data row based on settings.\n\t\t\t\tviewRowStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tif ( this.setting.rowFlex )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['min-height'] = this.setting.rowHeight + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['height'] = this.setting.rowHeight + 'px';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\trowDataClasses : function ()\n\t\t\t\t{\n\t\t\t\t\tlet classes = '';\n\n\t\t\t\t\tif ( this.setting.rowFlex )\n\t\t\t\t\t{\n\t\t\t\t\t\tclasses = 'rowFlex';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn classes;\n\t\t\t\t},\n\n\t\t\t\t// Calculate the total width of the table based on the column size.\n\t\t\t\ttableWidth : function ()\n\t\t\t\t{\n\t\t\t\t\tlet totalWidth   = 0;\n\t\t\t\t\tlet missingWidth = false;\n\n\t\t\t\t\tthis.columns.list.forEach( ( column ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( column.enabled )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tif ( column.width !== null )\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttotalWidth += column.width;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tmissingWidth = true;\n\t\t\t\t\t\t\t}\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\t// If a column width is not set, the total width cannot be determined.\n\t\t\t\t\tif ( !this.setting.responsiveTable && missingWidth )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn null;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn totalWidth;\n\t\t\t\t},\n\n\t\t\t\t// Returns a list of filterable columns.\n\t\t\t\tfilterableColumns : function ()\n\t\t\t\t{\n\t\t\t\t\tlet filterableColumns = [];\n\n\t\t\t\t\tthis.columns.list.forEach( ( column ) =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( column.filterable )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tfilterableColumns.push( column );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\n\t\t\t\t\treturn filterableColumns;\n\t\t\t\t},\n\n\t\t\t\t// Returns a list of filter options based on the selected column.\n\t\t\t\tfilterableOptions : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.filters.beingBuilt.column === null )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn [];\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.filters.beingBuilt.column.type === 'String' )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn ['Equals To', 'Contains', 'Not Equals To', 'Begins With'];\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.filters.beingBuilt.column.type === 'Number' )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn ['Equals To', 'Greater/Equal To', 'Less/Equal To', 'Contains', 'Not Equals To', 'Begins With'];\n\t\t\t\t\t}\n\t\t\t\t},\n\n\t\t\t\t// Returns the text shown on the selected filter column.\n\t\t\t\tfilterColumnText : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.filters.beingBuilt.column === null )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'Select Column ..'\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.filters.beingBuilt.column.title;\n\t\t\t\t},\n\n\t\t\t\t// Returns the text shown on the selected filter option.\n\t\t\t\tfilterOptionText : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.filters.beingBuilt.column === null )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'Select Filter ..';\n\t\t\t\t\t}\n\n\t\t\t\t\tif ( this.filters.beingBuilt.option === null )\n\t\t\t\t\t{\n\t\t\t\t\t\treturn 'Filter ..'\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\treturn this.filters.beingBuilt.option;\n\t\t\t\t\t}\n\n\t\t\t\t\treturn this.filterableOptions[this.filters.beingBuilt.option];\n\t\t\t\t},\n\n\t\t\t\t// Returns the styles for the layerHighlight div.\n\t\t\t\tlayerHighlightStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Returns the styles for the layerControl div.\n\t\t\t\tlayerControlStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Returns the styles for the layerOption div.\n\t\t\t\tlayerOptionStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Returns the styles for the layerFooter div.\n\t\t\t\tlayerFooterStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( this.setting.responsiveTable )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] ='100%';\n\t\t\t\t\t\t}\n\t\t\t\t\t\telse\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tstyles['max-width'] = this.tableWidth + 'px';\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Returns the styles for the quickViewContent div.\n\t\t\t\tquickViewContentStyles : function ()\n\t\t\t\t{\n\t\t\t\t\tlet styles = {};\n\n\t\t\t\t\tif ( this.feature.maximized )\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-height'] = ( this.$refs.bodyData.clientHeight * 0.8 ) + 'px';\n\t\t\t\t\t}\n\t\t\t\t\telse\n\t\t\t\t\t{\n\t\t\t\t\t\tstyles['max-height'] = this.setting.dataHeight + 'px';\n\t\t\t\t\t}\n\n\t\t\t\t\treturn styles;\n\t\t\t\t},\n\n\t\t\t\t// Returns the status of the Getting Started message.\n\t\t\t\tgettingStarted : function ()\n\t\t\t\t{\n\t\t\t\t\tif ( this.setting.startBySearch )\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( !this.search.searching && this.filters.active.length === 0 )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\treturn true;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\n\t\t\t\t\treturn false;\n\t\t\t\t}\n\t\t\t},\n\n\t\twatch :\n\t\t\t{\n\t\t\t\t// Watches for event changes.\n\t\t\t\t'event.name' : function ( eventName )\n\t\t\t\t{\n\t\t\t\t\tthis.$nextTick().then( () =>\n\t\t\t\t\t{\n\t\t\t\t\t\tif ( eventName )\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tthis.processEvent( eventName );\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}\n\t}\n</script>\n\n<style scoped lang=\"scss\"></style>\n","import './assets/jd-table.scss';\r\nimport component from './jd-table.vue';\r\n\r\nexport function install( Vue )\r\n{\r\n\tif ( install.installed )\r\n\t{\r\n\t\treturn;\r\n\t}\r\n\r\n\tinstall.installed = true;\r\n\r\n\tVue.component( 'jdtable', component );\r\n}\r\n\r\nconst plugin =\r\n{\r\n\tinstall\r\n};\r\n\r\nlet GlobalVue = null;\r\n\r\nif ( typeof window !== 'undefined' )\r\n{\r\n\tGlobalVue = window.Vue;\r\n}\r\nelse if ( typeof global !== 'undefined' )\r\n{\r\n\tGlobalVue = global.Vue;\r\n}\r\n\r\nif ( GlobalVue )\r\n{\r\n\tGlobalVue.use( plugin );\r\n}\r\n\r\ncomponent.install = install;\r\n\r\nexport default component;"],"names":["template","style","script","scopeId","isFunctionalTemplate","moduleIdentifier","shadowMode","createInjector","createInjectorSSR","createInjectorShadow","hook","options","render","staticRenderFns","_compiled","functional","_scopeId","context","this","$vnode","ssrContext","parent","__VUE_SSR_CONTEXT__","call","_registeredComponents","add","_ssrRegister","$root","$options","shadowRoot","originalRender","h","existing","beforeCreate","concat","install","Vue","installed","component","const","plugin","GlobalVue","window","global","use"],"mappings":"oMAqFA,MAnFA,SAA4BA,EAAUC,EAAOC,EAAQC,EAASC,EAAsBC,EAElFC,EAAYC,EAAgBC,EAAmBC,GACrB,kBAAfH,IACTE,EAAoBD,EACpBA,EAAiBD,EACjBA,GAAa,GAIf,IAiBII,EAjBAC,EAA4B,mBAAXT,EAAwBA,EAAOS,QAAUT,EAsD9D,GApDIF,GAAYA,EAASY,SACvBD,EAAQC,OAASZ,EAASY,OAC1BD,EAAQE,gBAAkBb,EAASa,gBACnCF,EAAQG,WAAY,EAEhBV,IACFO,EAAQI,YAAa,IAKrBZ,IACFQ,EAAQK,SAAWb,GAKjBE,GAEFK,EAAO,SAAcO,IAEnBA,EAAUA,GACVC,KAAKC,QAAUD,KAAKC,OAAOC,YAC3BF,KAAKG,QAAUH,KAAKG,OAAOF,QAAUD,KAAKG,OAAOF,OAAOC,aAGT,oBAAxBE,sBACrBL,EAAUK,qBAIRrB,GACFA,EAAMsB,KAAKL,KAAMV,EAAkBS,IAIjCA,GAAWA,EAAQO,uBACrBP,EAAQO,sBAAsBC,IAAIpB,IAMtCM,EAAQe,aAAehB,GACdT,IACTS,EAAOJ,EAAa,WAClBL,EAAMsB,KAAKL,KAAMT,EAAqBS,KAAKS,MAAMC,SAASC,cACxD,SAAUZ,GACZhB,EAAMsB,KAAKL,KAAMX,EAAeU,MAIhCP,EACF,GAAIC,EAAQI,WAAY,CAEtB,IAAIe,EAAiBnB,EAAQC,OAE7BD,EAAQC,OAAS,SAAkCmB,EAAGd,GAEpD,OADAP,EAAKa,KAAKN,GACHa,EAAeC,EAAGd,QAEtB,CAEL,IAAIe,EAAWrB,EAAQsB,aACvBtB,EAAQsB,aAAeD,EAAW,GAAGE,OAAOF,EAAUtB,GAAQ,CAACA,GAInE,OAAOR,y/eCsTT,y7zBCrYgBiC,EAASC,GAEnBD,EAAQE,YAKbF,EAAQE,WAAY,EAEpBD,EAAIE,UAAW,UAAWA,IAG3BC,IAAMC,EACN,SACCL,GAGGM,EAAY,KAEO,oBAAXC,OAEXD,EAAYC,OAAON,IAEQ,oBAAXO,SAEhBF,EAAYE,OAAOP,KAGfK,GAEJA,EAAUG,IAAKJ,GAGhBF,EAAUH,QAAUA"}